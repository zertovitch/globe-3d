with Ada.Text_IO; use Ada.Text_IO;

procedure GL_Overloader is

  procedure Spit( name: String; ext: String; n: Positive; typ: Character ) is

     function Typ_name return String is
     begin
       case typ is
         when 'b' => return "byte";
         when 'f' => return "float";
         when 'd' => return "double";
         when 'i' => return "int";
         when 's' => return "short";
         when others => return "???";
       end case;
     end Typ_name;

     xyzw: constant String(1..4):= "xyzw";
     nums: constant String:= Positive'Image(n);
     num: constant Character:= nums(nums'Last);

  begin
    Put_Line("  -- Wrapper for " & name & num & typ);
    for C in reverse Boolean loop
      if C then
        Put("  procedure " & name & num & typ & " (" );
      else
        Put("  procedure " & name & ext & " (" );
      end if;
      for i  in 1..n loop
        Put( xyzw(i) );
        if i < n then Put(','); end if;
      end loop;
      Put( ": GL." & Typ_name & ")");
      if not C then Put(" renames " & name & num & typ); end if;
      Put_Line(";");
    end loop;
    New_Line;
  end Spit;

begin
  Put_Line("--  The following wrappers are automatically generated by");
  Put_Line("--  the GL_Overloader tool. To generate other wrappers easily,");
  Put_Line("--  look at GL_Overloader.adb .");
  New_Line;

  for n in 2..4 loop
    Spit( "Vertex", "", n, 'd' );
    Spit( "Vertex", "_f", n, 'f' );
    Spit( "Vertex", "", n, 'i' );
    Spit( "Vertex", "_s", n, 's' );
  end loop;

  Spit( "Translate", "", 3, 'd' );
  Spit( "Translate", "_f", 3, 'f' );

  Spit( "Normal", "", 3, 'd' );
  Spit( "Normal", "_f", 3, 'f' );
  Spit( "Normal", "", 3, 'i' );
  Spit( "Normal", "_b", 3, 'b' );
  Spit( "Normal", "_s", 3, 's' );

  Spit( "Scale", "", 3, 'd' );
  Spit( "Scale", "_f", 3, 'f' );

  for n in 3..4 loop
    Spit( "Color", "", n, 'd' );
    Spit( "Color", "_f", n, 'f' );
    Spit( "Color", "", n, 'i' );
    Spit( "Color", "_s", n, 's' );
  end loop;

end GL_Overloader;
