--  Code generator that produces `renames` clauses for GL operations
--  with identical names, that do the same job, but with various types
--  and number of arguments.
--  In Ada you can use excatly the same name (overloading), in C (the
--  language of the GL library) you need to add a distinctive suffix.

with Ada.Text_IO;

procedure GL_Overloader is

  use Ada.Text_IO;

  subtype Arg_Type is Positive range 1 .. 4;

  procedure Spit (routine_name : String; ext : String; n : Arg_Type; typ : Character) is

     function Typ_Name return String is
     begin
       case typ is
         when 'b' => return "Byte";
         when 'f' => return "Float";
         when 'd' => return "Double";
         when 'i' => return "Int";
         when 's' => return "Short";
         when others => return "???";
       end case;
     end Typ_Name;

     xyzw : constant String (Arg_Type) := "xyzw";

     function RGBA (i : Arg_Type) return String is
       (case i is
         when 1 => "red_value",
         when 2 => "green_value",
         when 3 => "blue_value",
         when 4 => "alpha_value");

     nums : constant String := Positive'Image (n);
     num  : constant Character := nums (nums'Last);

  begin
    Put_Line
      ("  --  Wrapper for " & routine_name & num & typ &
       "   (" & routine_name & ", " & num & " arguments, type: " & Typ_Name & ")");
    for C in reverse Boolean loop
      if C then
        Put ("  procedure " & routine_name & num & typ & " (");
      else
        Put ("  procedure " & routine_name & ext & " (");
      end if;
      for i  in 1 .. n loop
        if routine_name = "Color" then
          Put (RGBA (i));
        else
          Put (xyzw (i));
        end if;
        if i < n then Put (", "); end if;
      end loop;
      Put (" : GL." & Typ_Name & ")");
      if not C then Put (" renames " & routine_name & num & typ); end if;
      Put_Line (";");
    end loop;
    New_Line;
  end Spit;

begin
  Put_Line ("--  The following wrappers are automatically generated by");
  Put_Line ("--  the GL_Overloader tool. To generate other wrappers easily,");
  Put_Line ("--  look at GL_Overloader.adb .");
  New_Line;
  Put_Line ("--  *** Code generated by `tools/gl_overloader.adb` ***");
  New_Line;

  for n in 3 .. 4 loop
    Spit ("Color", "  ", n, 'd');
    Spit ("Color", "_f", n, 'f');
    Spit ("Color", "  ", n, 'i');
    Spit ("Color", "_s", n, 's');
  end loop;

  Spit ("Normal", "  ", 3, 'd');
  Spit ("Normal", "_f", 3, 'f');
  Spit ("Normal", "  ", 3, 'i');
  Spit ("Normal", "_b", 3, 'b');
  Spit ("Normal", "_s", 3, 's');

  Spit ("Scale", "  ", 3, 'd');
  Spit ("Scale", "_f", 3, 'f');

  Spit ("Translate", "  ", 3, 'd');
  Spit ("Translate", "_f", 3, 'f');

  for n in 2 .. 4 loop
    Spit ("Vertex", "  ", n, 'd');
    Spit ("Vertex", "_f", n, 'f');
    Spit ("Vertex", "  ", n, 'i');
    Spit ("Vertex", "_s", n, 's');
  end loop;

  New_Line;
  Put_Line ("--  *** End of Code generated by `tools/gl_overloader.adb` ***");

end GL_Overloader;
