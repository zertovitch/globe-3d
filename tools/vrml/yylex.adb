--  Warning: This lexical scanner is automatically generated by AFLEX.
--  *******   It is useless to modify it. Change the ".Y" & ".L" files instead.
with Text_IO; use Text_IO;
with vrml_dfa; use vrml_dfa;
with vrml_io; use vrml_io;
--# line 1 "vrml.l"
-- *---------------------------------------------------------------------------*
-- *  vrml.l                                                                 
-- *                                                                           
-- * Project: SICS DIVE
-- * Copyright: SICS
-- * Implemented by: Emmanuel Frecon and Olof Hagsand
-- *
-- * This file contains lex declarations for a VRML Parser.
-- *
-- *---------------------------------------------------------------------------*
--  /*==========================================================================
--    Local variables
--    ==========================================================================*/
--  static char rcsid[] := "$Id: file.l,v 1.6 1995/05/26 12:13:16 olof Exp $";
--  static void print_rcsid() {if (1) fprintf(stdout,"%s", rcsid); else print_rcsid();}
--  static int linenum := 1;
--  static char current_file[128];
--  /* #undef   ECHO*/
--  #include <string.h>
--  #include "vrml.tab.h"
--  #include "vrml.h"
--  #undef yywrap
--  int yywrap()
--  {
--    return 1;
--  } 
--  %}
--  /*****************************************************************************/
--  /* lexical definitions */
--  /*****************************************************************************/
--  %e 1800
--  %p 14000
--  %a 22000
--  %n 2000
--  %s use_and_def
--  /* The definition of an instance is not exactly correct, it should also
--     exclude control characters, this could be done by [:cntrl:] with flex
--     and [\0-\37] with lex. */
-- INSTANCE    [^0-9{}\'\"\\ \t\n\f]*
-- INSTANCE [{}\'\"\\]*
-- ID   [A-Za-z_][0-9A-Za-z_]*
-- VRMLWORD    [A-Za-z_][0-9A-Za-z_]*
--# line 60 "vrml.l"


with VRML_Tokens; use VRML_Tokens;
with VRML_Help;   use VRML_Help;

--/*
--\"[^\"]*\"            {
--                       yytext[strlen(yytext) - 1] := '\0';
--                      yylval.string := strdup(yytext + 1);
--                  return VRMLSTRING;
--                }
--fields                { BEGIN(field); return FIELDS; }
--<field>"]"            { BEGIN(INITIAL); return ']'; }
--<field>[^\]\n]*            ;
--<field>\n            linenum ++;
--{ID}                { BEGIN(newnode); return UNKNOWNNODE; }
--<newnode>"}"            { BEGIN(INITIAL); return '}'; }
--<newnode>[^\}\n]*        ;
--<newnode>\n            linenum ++;
--*/

--int vrml_filel_linenum(char **file)
--{
--  *file := current_file;
--  return linenum;
--}

--void vrml_filel_init(FILE *f, char *file_name)
--{
--#ifdef FLEX_SCANNER
--  static int firstcall := 1;
--#endif

--  linenum := 1;
--  strcpy(current_file, file_name);

--#ifdef FLEX_SCANNER
--  if (!firstcall)
--    yyrestart(yyin=f);
--  else {
--    firstcall := 0;
--    yyin := f;
--  }
--#else /* FLEX_SCANNER */
--  yyin := f;
--#endif /* FLEX_SCANNER */
--}

function YYLex return Token is

subtype Short is Integer range -32768 .. 32767;
    yy_act : Integer;
    yy_c   : Short;

-- returned upon end-of-file
YY_END_TOK : constant Integer := 0;
YY_END_OF_BUFFER : constant := 155;
subtype yy_state_type is Integer;
yy_current_state : yy_state_type;
INITIAL : constant := 0;
yy_accept : constant array(0..878) of Short :=
    (   0,
      140,  140,  155,  153,  144,  145,  153,  153,  148,  140,
      140,  137,  138,  151,  152,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  150,  147,  149,
      144,    0,  143,    0,  142,  140,  140,  138,    0,  140,
      139,    0,  138,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,    0,
      140,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,   50,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  140,
      139,  141,  107,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
        1,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,   14,   98,  146,  146,  146,
      146,  146,  125,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  106,  146,  146,  146,  146,
        2,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      126,  146,  114,  146,  146,  146,  146,  146,    4,  146,
      146,  146,  146,    6,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,   13,  146,  146,  146,  101,  146,
      146,  146,  146,   96,  113,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  111,  146,  146,  146,  146,  146,  146,  146,   54,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  108,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  135,  146,
       52,  146,  146,  146,  146,  146,  146,  146,   45,  146,
      146,  146,  146,  146,  146,  109,  146,  146,  146,  146,
      146,   10,  146,   91,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,   40,  146,  146,
      146,  146,   43,  146,  146,   61,  146,  146,  103,  146,
       26,  146,  146,  110,  146,  146,  104,  131,  146,  146,
      146,  146,  146,  146,   56,  146,  146,  146,  146,  146,
       70,  146,  146,  146,   44,   92,   93,  146,  146,  146,

      146,  146,  146,  105,   62,  146,  133,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,   55,
      136,  146,  146,  146,   42,  146,  146,  115,  146,  146,
      146,  146,   71,   19,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,   49,  146,  134,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,   29,  146,
      146,   46,   31,  146,  146,  146,  146,  146,  146,   72,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  116,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  117,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,   47,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,   99,  146,  146,  146,  146,  146,  146,  146,
        7,  146,  146,  146,  146,  146,   85,   90,  146,  146,
      146,  146,  146,  146,  146,  146,   77,   16,  146,  146,
      146,  146,  146,  146,  120,  118,  146,  146,  146,   24,
       73,  146,   25,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,   32,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,    3,  146,  146,  128,  146,
      146,  146,  146,  146,  146,  146,   53,  146,  146,  146,
        9,  146,  146,  146,   51,  146,  146,  146,  146,  146,
      146,  146,   79,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,   27,  146,   84,   68,  146,   30,
      146,  146,  146,   35,  146,  146,  146,  146,  146,  146,
      146,  146,   38,   39,  146,  100,  146,  146,   57,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  122,  146,   23,  146,  146,  146,   63,   28,

      146,   78,  146,  146,  146,  146,  146,  112,  146,  146,
      146,  146,   89,  146,  146,    5,  146,   86,   88,   97,
      146,  146,   87,  146,  146,   76,  146,  146,  146,  146,
      146,  146,  146,  146,   59,   74,  146,  146,  146,  146,
      146,  146,   81,  146,  146,  146,  146,  146,   37,  146,
      146,  146,  146,  146,   64,   41,  146,   65,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
       69,  146,  146,  146,  146,  146,  146,   67,   75,  146,
      146,   48,   15,  146,   58,  146,   20,  146,  146,  146,

      146,  146,   82,  146,   66,  146,  146,  146,  146,  146,
      146,  146,  146,  146,   11,   12,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
       83,  146,  146,   17,   18,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  129,    8,
      146,  121,  119,  146,  146,   94,  146,  146,  146,  146,
      146,  127,  146,  146,  146,   22,   33,  146,   60,  146,
      132,  146,   21,  123,   34,   36,  130,    0
    ) ;

yy_ec : constant array (ASCII.NUL..Character'Last) of Short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   11,   11,   11,   11,   14,   14,    1,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       15,    1,   16,    1,   17,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,    1,    1, others=> 1

    ) ;

yy_meta : constant array (0 ..46) of Short :=
    (   0,
        1,    1,    1,    1,    1,    2,    1,    2,    3,    4,
        4,    4,    4,    4,    1,    1,    5,    6,    6,    6,
        6,    7,    6,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1
    ) ;

yy_base : constant array(0..885) of Short :=
    (   0,
        0,    0,  968,  969,  965,  969,  962,  962,  969,   38,
       43,   57,   50,  969,  969,    0,   44,   43,   54,   55,
       93,   76,  929,  941,   54,  924,   56,  943,   77,   87,
       95,   98,  113,  112,   27,   75,  116,  969,  969,  969,
      958,  955,  969,  955,  969,  147,   78,  103,  113,  152,
      166,    0,    0,    0,  928,  937,  935,  917,  921,   99,
      921,  111,  152,  929,   95,  921,  149,  114,  917,  181,
      181,  922,  176,  126,  166,  915,  920,  927,  177,  926,
      907,  129,  150,  166,  912,  173,  911,  917,    0,  175,
      917,  903,  902,  181,  188,  182,  912,  898,  903,  192,

      183,  202,  181,  904,  204,  203,  906,  890,  897,  205,
      896,  900,  905,  897,  205,  899,  903,  905,  882,  220,
        0,    0,    0,  895,  894,  887,  877,  896,  879,  878,
      884,  893,  880,  213,  876,  879,  891,  886,  875,  880,
      887,  867,  883,  879,  879,  867,  863,  876,  861,  870,
      866,  872,  875,  855,  853,  866,  865,  866,  855,  864,
      856,  847,  846,  860,  863,    0,    0,  215,  858,  857,
      848,  844,    0,  854,  850,  839,  836,  222,  841,  845,
      844,  845,  847,  845,  841,  847,  828,  834,  840,  843,
      834,  826,  827,  835,  834,  829,  834,  833,  830,  814,

      815,  823,  819,  810,  809,    0,  814,  822,  821,  811,
        0,  803,  803,  802,  818,  800,  803,  223,  813,  808,
        0,  224,    0,  801,  810,  798,  802,  794,    0,  806,
      806,  789,  789,    0,  801,  792,  784,  796,  785,  781,
      798,  785,  780,  778,  792,  784,  791,  780,  781,  773,
      775,  782,  784,  764,    0,  773,  777,  776,    0,  772,
      763,  764,  772,    0,    0,  779,  764,  764,  762,  775,
      756,  223,  758,  753,  752,  750,  765,  764,  767,  747,
      746,    0,  760,  759,  745,  756,  756,  751,  740,    0,
      754,  748,  735,  737,  742,  733,  738,  746,  747,  728,

      729,    0,  724,  731,  740,  729,  738,  734,  733,  211,
      726,  725,  724,  717,  731,  726,  721,  715,    0,  709,
        0,  707,  721,  724,  723,  721,  722,  713,    0,  715,
      704,  702,  715,  711,  694,    0,  693,  698,  715,  711,
      694,    0,  693,    0,  707,  692,  707,  703,  693,  698,
      697,  681,  692,  694,  682,  694,  688,    0,  698,  697,
      692,  691,  225,  686,  675,    0,  675,  672,    0,  682,
      219,  676,  688,    0,  228,  674,    0,    0,  673,  674,
      680,  675,  674,  675,    0,  673,  662,  234,  661,  655,
        0,  659,  652,  672,    0,    0,    0,  671,  661,  652,

      666,  656,  643,  650,    0,  658,    0,  652,  647,  663,
      662,  657,  641,  644,  654,  649,  651,  634,  639,    0,
        0,  641,  644,  627,  650,  646,  640,    0,  639,  641,
      631,  644,  624,  240,  629,  641,  623,  628,  636,  620,
      619,  633,  626,  629,  618,    0,  629,    0,  616,  629,
      611,  627,  607,  617,  600,  619,  616,  621,    0,  614,
      606,    0,    0,  614,  603,  616,  615,  606,  600,    0,
      598,  604,  603,  601,  606,  584,  587,  601,  604,  585,
       43,  600,  588,  587,  582,    0,  579,  595,  582,  578,
      590,  589,  588,  573,  579,  576,  144,  569,  585,  583,

      572,  573,  566,  574,  568,  561,  560,  578,    0,  573,
      557,  556,  555,  567,  553,  558,  550,  556,  566,  559,
      549,  551,  551,  548,  544,    0,  544,  553,  556,  252,
      541,  538,  539,  536,  555,  536,  544,  537,  537,  535,
      529,  543,    0,  543,  541,  525,  539,  531,  535,  534,
        0,  531,  524,  524,  536,  533,    0,    0,  515,  529,
      526,  531,  522,  505,  528,  523,    0,  249,  526,  512,
      521,  505,  514,  506,  521,  520,  514,  509,  509,    0,
        0,  504,    0,  495,  509,  508,  494,  491,  505,  490,
      505,  487,  501,  485,  489,  490,  493,  496,  495,  246,

      495,  486,  479,  491,  483,    0,  476,  484,    0,  487,
      467,  475,  477,  476,  472,  474,  484,  464,  468,  481,
        0,  469,  477,  465,    0,  458,  457,  467,  461,  460,
      469,  467,    0,  456,  462,  460,  459,  443,  444,  445,
      452,  448,  448,  460,    0,  441,    0,    0,  444,    0,
      432,  435,  435,  430,  426,  426,   76,  122,  220,  245,
      249,  252,    0,    0,  242,    0,  238,  264,    0,  259,
      258,  259,  252,  252,  256,  264,  258,  257,  267,  268,
      269,  266,  275,  263,  274,  260,  271,  257,  268,  274,
      270,  271,  286,  282,    0,  279,  271,  270,    0,    0,

      279,    0,  291,  275,  289,  281,  293,    0,  294,  294,
      298,  282,    0,  283,  283,    0,  292,    0,    0,    0,
      286,  293,    0,  291,  304,    0,  289,  290,  295,  302,
      308,  308,  308,  301,    0,    0,  313,  313,  314,  310,
      317,  307,    0,  321,  308,  310,  321,  310,    0,  302,
      323,  324,  314,  322,    0,    0,  309,    0,  324,  316,
      330,  331,  332,  324,  327,  331,  317,  327,  336,  341,
      340,  341,  333,  347,  342,  330,  333,  333,  344,  353,
        0,  355,  338,  352,  344,  350,  353,    0,    0,  341,
      342,    0,    0,  349,    0,  346,    0,  364,  342,  343,

      364,  356,    0,  361,    0,  365,  358,  355,  354,  366,
      376,  370,  359,  371,    0,    0,  373,  368,  369,  378,
      379,  380,  381,  372,  373,  388,  389,  366,  379,  374,
        0,  390,  376,    0,    0,  392,  394,  395,  376,  383,
      388,  385,  384,  400,  386,  391,  401,  384,    0,    0,
      392,    0,    0,  406,  411,    0,  400,  409,  391,  401,
      412,    0,  402,  418,  416,    0,    0,  426,    0,  404,
        0,  418,    0,    0,    0,    0,    0,  969,  440,  447,
      452,  456,  461,  467,  468
    ) ;

yy_def : constant array (0 ..885) of Short :=
    (   0,
      878,    1,  878,  878,  878,  878,  879,  880,  878,  878,
      878,  878,  881,  878,  878,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  878,  878,  878,
      878,  879,  878,  880,  878,  878,  883,  881,  884,  878,
      878,  885,   48,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  878,
       21,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  878,
       51,  885,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,    0,  878,  878,
      878,  878,  878,  878,  878
    ) ;

yy_nxt : constant array (0 ..1015) of Short :=
    (   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   13,   13,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   16,   27,   28,
       29,   30,   31,   16,   32,   33,   34,   35,   36,   37,
       16,   16,   16,   38,   39,   40,   46,   47,   48,   48,
       48,   48,   50,   50,   50,   50,   50,  112,   46,   49,
      546,   59,  113,  547,   49,   46,   47,   51,   51,   51,
       47,   49,   55,   56,   60,   61,   67,   82,   49,   57,
       68,   58,   62,   78,   79,   63,   46,   83,   64,   69,
       80,   65,  114,   73,   85,   66,  115,   52,   70,   49,

       70,   74,   71,   71,   71,   71,   71,   75,   86,   88,
      708,   46,   92,  138,   87,   95,   93,   89,   70,   96,
       70,   90,   72,   97,   49,   91,   94,  128,  131,   98,
       99,  139,  100,  108,  101,  129,  144,  102,  103,  709,
      116,  117,  132,  109,  104,  105,  110,  151,  145,  106,
      118,  163,  107,  111,  152,  119,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,  562,  164,   49,  165,
      166,  141,  563,   49,   46,  121,  121,  121,  121,   47,
      133,  142,  134,  135,  143,  153,  878,   49,  878,  136,
      120,  120,  120,  120,  120,  148,  154,  158,  167,  159,

      174,  194,  168,  170,  149,  150,  179,  171,  181,  188,
       54,  175,  183,  160,  184,  190,  180,  191,  182,  192,
      201,  197,  207,  195,  213,  198,  189,  193,  199,  120,
      120,  120,  120,  120,  229,  200,  262,  202,  272,  214,
      311,  450,  208,  315,  203,  359,  396,  397,  312,  263,
      451,  230,  454,  443,  710,  360,  465,  273,  504,  316,
      444,  361,  466,  594,  455,  505,  467,  628,  658,  711,
      712,  595,  713,  714,  629,  715,  716,  659,  717,  718,
      719,  660,  720,  721,  722,  723,  724,  725,  726,  727,
      728,  729,  730,  731,  732,  733,  734,  735,  736,  737,

      738,  739,  740,  741,  742,  743,  744,  745,  746,  747,
      748,  749,  750,  751,  752,  753,  754,  755,  756,  757,
      758,  759,  760,  761,  762,  763,  764,  765,  766,  767,
      768,  769,  770,  771,  772,  773,  774,  775,  776,  777,
      778,  779,  780,  781,  782,  783,  784,  785,  786,  787,
      788,  789,  790,  791,  792,  793,  794,  795,  796,  797,
      798,  799,  800,  801,  802,  803,  804,  805,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  816,  817,
      818,  819,  820,  821,  822,  823,  824,  825,  826,  827,
      828,  829,  830,  831,  832,  833,  834,  835,  836,  837,

      838,  839,  840,  841,  842,  843,  845,  846,  844,  847,
      848,  849,  850,  851,  852,  853,  854,  855,  856,  857,
      858,  859,  860,  861,  862,  863,  864,  865,  866,  867,
      868,  869,  870,  871,  872,  873,  874,  875,  876,  877,
       42,   42,   42,   42,   42,   42,   42,   44,   44,   44,
       44,   44,   44,   44,   53,   53,  707,  706,   53,   54,
       54,   54,   54,   47,   47,  705,  704,   47,  120,  703,
      120,  122,  702,  122,  122,  701,  700,  699,  698,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,
      686,  685,  684,  683,  682,  681,  680,  679,  678,  677,

      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  597,  596,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  570,

      569,  568,  567,  566,  565,  564,  561,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  464,  463,  462,  461,

      460,  459,  458,  457,  456,  453,  452,  449,  448,  447,
      446,  445,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  358,  357,  356,  355,  354,  353,  352,  351,  350,

      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  314,  313,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  271,  270,  269,  268,  267,  266,  265,  264,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,

      241,  240,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  212,  211,  210,  209,  206,
      205,  204,  196,  187,  186,  185,  178,  177,  176,  173,
      172,  169,  162,  161,  157,  156,  155,  147,  146,  140,
      137,  130,  127,  126,  125,  124,  123,   45,   43,   41,
       84,   81,   77,   76,   45,   43,   41,  878,    3,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,

      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878
    ) ;

yy_chk : constant array (0 ..1015) of Short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   10,   10,   10,   10,
       10,   10,   11,   11,   11,   11,   11,   35,   13,   10,
      481,   18,   35,  481,   11,   12,   12,   12,   12,   12,
       12,   13,   17,   17,   18,   19,   20,   27,   12,   17,
       20,   17,   19,   25,   25,   19,   47,   27,   19,   20,
       25,   19,   36,   22,   29,   19,   36,   12,   21,   47,

       21,   22,   21,   21,   21,   21,   21,   22,   29,   30,
      657,   48,   31,   65,   29,   32,   31,   30,   49,   32,
       49,   30,   21,   32,   48,   30,   31,   60,   62,   32,
       33,   65,   33,   34,   33,   60,   68,   33,   33,  658,
       37,   37,   62,   34,   33,   33,   34,   74,   68,   33,
       37,   82,   33,   34,   74,   37,   46,   46,   46,   46,
       46,   50,   50,   50,   50,   50,  497,   82,   46,   83,
       83,   67,  497,   50,   51,   51,   51,   51,   51,   51,
       63,   67,   63,   63,   67,   75,   71,   51,   71,   63,
       70,   70,   70,   70,   70,   73,   75,   79,   84,   79,

       90,  103,   84,   86,   73,   73,   94,   86,   95,  100,
       71,   90,   96,   79,   96,  101,   94,  101,   95,  102,
      106,  105,  110,  103,  115,  105,  100,  102,  105,  120,
      120,  120,  120,  120,  134,  105,  168,  106,  178,  115,
      218,  371,  110,  222,  106,  272,  310,  310,  218,  168,
      371,  134,  375,  363,  659,  272,  388,  178,  434,  222,
      363,  272,  388,  530,  375,  434,  388,  568,  600,  660,
      661,  530,  662,  665,  568,  667,  668,  600,  670,  671,
      672,  600,  673,  674,  675,  676,  677,  678,  679,  680,
      681,  682,  683,  684,  685,  686,  687,  688,  689,  690,

      691,  692,  693,  694,  696,  697,  698,  701,  703,  704,
      705,  706,  707,  709,  710,  711,  712,  714,  715,  717,
      721,  722,  724,  725,  727,  728,  729,  730,  731,  732,
      733,  734,  737,  738,  739,  740,  741,  742,  744,  745,
      746,  747,  748,  750,  751,  752,  753,  754,  757,  759,
      760,  761,  762,  763,  764,  765,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  775,  776,  777,  778,  779,
      780,  782,  783,  784,  785,  786,  787,  790,  791,  794,
      796,  798,  799,  800,  801,  802,  804,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  817,  818,  819,  820,

      821,  822,  823,  824,  825,  826,  827,  828,  826,  829,
      830,  832,  833,  836,  837,  838,  839,  840,  841,  842,
      843,  844,  845,  846,  847,  848,  851,  854,  855,  857,
      858,  859,  860,  861,  863,  864,  865,  868,  870,  872,
      879,  879,  879,  879,  879,  879,  879,  880,  880,  880,
      880,  880,  880,  880,  881,  881,  656,  655,  881,  882,
      882,  882,  882,  883,  883,  654,  653,  883,  884,  652,
      884,  885,  651,  885,  885,  649,  646,  644,  643,  642,
      641,  640,  639,  638,  637,  636,  635,  634,  632,  631,
      630,  629,  628,  627,  626,  624,  623,  622,  620,  619,

      618,  617,  616,  615,  614,  613,  612,  611,  610,  608,
      607,  605,  604,  603,  602,  601,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  582,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  566,  565,  564,  563,  562,  561,
      560,  559,  556,  555,  554,  553,  552,  550,  549,  548,
      547,  546,  545,  544,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  529,  528,  527,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  508,  507,  506,  505,  504,

      503,  502,  501,  500,  499,  498,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  485,  484,  483,  482,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      469,  468,  467,  466,  465,  464,  461,  460,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  447,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      433,  432,  431,  430,  429,  427,  426,  425,  424,  423,
      422,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  406,  404,  403,  402,  401,  400,  399,
      398,  394,  393,  392,  390,  389,  387,  386,  384,  383,

      382,  381,  380,  379,  376,  373,  372,  370,  368,  367,
      365,  364,  362,  361,  360,  359,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  343,
      341,  340,  339,  338,  337,  335,  334,  333,  332,  331,
      330,  328,  327,  326,  325,  324,  323,  322,  320,  318,
      317,  316,  315,  314,  313,  312,  311,  309,  308,  307,
      306,  305,  304,  303,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  289,  288,  287,  286,  285,
      284,  283,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  271,  270,  269,  268,  267,  266,  263,  262,  261,

      260,  258,  257,  256,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  233,  232,  231,  230,  228,  227,
      226,  225,  224,  220,  219,  217,  216,  215,  214,  213,
      212,  210,  209,  208,  207,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      180,  179,  177,  176,  175,  174,  172,  171,  170,  169,
      165,  164,  163,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  146,

      145,  144,  143,  142,  141,  140,  139,  138,  137,  136,
      135,  133,  132,  131,  130,  129,  128,  127,  126,  125,
      124,  119,  118,  117,  116,  114,  113,  112,  111,  109,
      108,  107,  104,   99,   98,   97,   93,   92,   91,   88,
       87,   85,   81,   80,   78,   77,   76,   72,   69,   66,
       64,   61,   59,   58,   57,   56,   55,   44,   42,   41,
       28,   26,   24,   23,    8,    7,    5,    3,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,

      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878
    ) ;

  --  Copy whatever the last rule matched to the standard output

  procedure ECHO is
  begin
    if Text_IO.Is_Open (user_output_file) then
      Text_IO.Put ( user_output_file, YYText );
    else
      Text_IO.Put ( YYText );
    end if;
  end ECHO;

  --  enter a start condition.
  --  Using procedure requires a () after the ENTER, but makes everything
  --  much neater.

  procedure ENTER ( state : Integer ) is
  begin
    yy_start := 1 + 2 * state;
  end ENTER;

  -- action number for EOF rule of a given start state
  function YY_STATE_EOF (state : Integer) return Integer is
  begin
    return YY_END_OF_BUFFER + state + 1;
  end YY_STATE_EOF;

  -- return all but the first 'n' matched characters back to the input stream
  procedure yyless (n : Integer) is
  begin
    yy_ch_buf(yy_cp) := yy_hold_char;  --  undo effects of setting up yytext
    yy_cp := yy_bp + n;
    yy_c_buf_p := yy_cp;
    YY_DO_BEFORE_ACTION;  --  set up yytext again
  end yyless;

  -- redefine this if you have something you want each time.
  procedure YY_USER_ACTION is
  begin
    null;
  end YY_USER_ACTION;

  --  yy_get_previous_state - get the state just before the EOB char was reached

  function yy_get_previous_state return yy_state_type is
    yy_current_state : yy_state_type;
    yy_c : Short;
begin
    yy_current_state := yy_start;

    for yy_cp in yytext_ptr..yy_c_buf_p - 1 loop
        yy_c := yy_ec(yy_ch_buf(yy_cp));
        if yy_accept(yy_current_state) /= 0 then
            yy_last_accepting_state := yy_current_state;
            yy_last_accepting_cpos := yy_cp;
        end if;
        while yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state loop
            yy_current_state := yy_def(yy_current_state);
            if yy_current_state >= 879 then
                yy_c := yy_meta(yy_c);
            end if;
        end loop;
        yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
    end loop;

    return yy_current_state;
  end yy_get_previous_state;

  procedure yyrestart( input_file : File_Type ) is
  begin
    Open_Input (Text_IO.Name (input_file));
  end yyrestart;

begin  --  of YYLex
<<new_file>>
        --  This is where we enter upon encountering an end-of-file and
        --  yyWrap() indicating that we should continue processing

    if yy_init then
        if yy_start = 0 then
          yy_start := 1;      --  first start state
        end if;

        --  We put in the '\n' and start reading from [1] so that an
        --  initial match-at-newline will be true.

        yy_ch_buf(0) := ASCII.LF;
        yy_n_chars := 1;

        --  We always need two end-of-buffer characters. The first causes
        --  a transition to the end-of-buffer state. The second causes
        --  a jam in that state.

        yy_ch_buf(yy_n_chars) := YY_END_OF_BUFFER_CHAR;
        yy_ch_buf(yy_n_chars + 1) := YY_END_OF_BUFFER_CHAR;

        yy_eof_has_been_seen := False;

        yytext_ptr := 1;
        yy_c_buf_p := yytext_ptr;
        yy_hold_char := yy_ch_buf(yy_c_buf_p);
        yy_init := False;
    end if;  --  yy_init

    loop                -- loops until end-of-file is reached


        yy_cp := yy_c_buf_p;

        -- support of yytext
        yy_ch_buf(yy_cp) := yy_hold_char;

        -- yy_bp points to the position in yy_ch_buf of the start of the
        -- current run.
        yy_bp := yy_cp;
        yy_current_state := yy_start;
        loop
                yy_c := yy_ec(yy_ch_buf(yy_cp));
                if yy_accept(yy_current_state) /= 0 then
                    yy_last_accepting_state := yy_current_state;
                    yy_last_accepting_cpos := yy_cp;
                end if;
                while yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state loop
                    yy_current_state := yy_def(yy_current_state);
                    if yy_current_state >= 879 then
                        yy_c := yy_meta(yy_c);
                    end if;
                end loop;
                yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
            yy_cp := yy_cp + 1;
if yy_current_state = 878 then
    exit;
end if;
        end loop;
        yy_cp := yy_last_accepting_cpos;
        yy_current_state := yy_last_accepting_state;

<<next_action>>
            yy_act := yy_accept(yy_current_state);
            YY_DO_BEFORE_ACTION;
            YY_USER_ACTION;

        if aflex_debug then  --  Output acceptance info. for (-d) debug mode
            Text_IO.Put (Standard_Error, "--accepting rule #");
            Text_IO.Put (Standard_Error, Integer'Image (yy_act));
            Text_IO.Put_Line (Standard_Error, "(""" & YYText & """)");
        end if;


<<do_action>>   -- this label is used only to access EOF actions
            case yy_act is
                when 0 =>  --  Must backtrack
                  --  Undo the effects of YY_DO_BEFORE_ACTION
                  yy_ch_buf(yy_cp) := yy_hold_char;
                  yy_cp := yy_last_accepting_cpos;
                  yy_current_state := yy_last_accepting_state;
                  goto next_action;


  when 1 =>
--# line 62 "vrml.l"
 -- BEGIN(use_and_def); 
                     return DEF; 

--<use_and_def>{INSTANCE}        { yylval.string := strdup(yytext);
--                  BEGIN(INITIAL);
--                  return VRMLWORD; }
--<use_and_def>[ \t]*        ;
--<use_and_def>\n            linenum ++;
  when 2 =>
--# line 69 "vrml.l"
 -- BEGIN(use_and_def);
                      return USE_t; 

  when 3 =>
--# line 72 "vrml.l"
 return ASCIITEXT; 

  when 4 =>
--# line 73 "vrml.l"
 return CONE; 

  when 5 =>
--# line 74 "vrml.l"
 return COORDINATE3; 

  when 6 =>
--# line 75 "vrml.l"
 return CUBE; 

  when 7 =>
--# line 76 "vrml.l"
 return CYLINDER; 

  when 8 =>
--# line 77 "vrml.l"
 return DIRECTIONALLIGHT; 

  when 9 =>
--# line 78 "vrml.l"
 return FONTSTYLE; 

  when 10 =>
--# line 79 "vrml.l"
 return GROUP; 

  when 11 =>
--# line 80 "vrml.l"
 return INDEXEDFACESET; 

  when 12 =>
--# line 81 "vrml.l"
 return INDEXEDLINESET; 

  when 13 =>
--# line 82 "vrml.l"
 return INFO; 

  when 14 =>
--# line 83 "vrml.l"
 return LOD; 

  when 15 =>
--# line 84 "vrml.l"
 return LEVELOFDETAIL; 

  when 16 =>
--# line 85 "vrml.l"
 return MATERIAL; 

  when 17 =>
--# line 86 "vrml.l"
 return MATERIALBINDING; 

  when 18 =>
--# line 87 "vrml.l"
 return MATRIXTRANSFORM; 

  when 19 =>
--# line 88 "vrml.l"
 return NORMAL; 

  when 20 =>
--# line 89 "vrml.l"
 return NORMALBINDING; 

  when 21 =>
--# line 90 "vrml.l"
 return ORTHOGRAPHICCAMERA; 

  when 22 =>
--# line 91 "vrml.l"
 return PERSPECTIVECAMERA; 

  when 23 =>
--# line 92 "vrml.l"
 return POINTLIGHT; 

  when 24 =>
--# line 93 "vrml.l"
 return POINTSET; 

  when 25 =>
--# line 94 "vrml.l"
 return ROTATION; 

  when 26 =>
--# line 95 "vrml.l"
 return SCALE; 

  when 27 =>
--# line 96 "vrml.l"
 return SEPARATOR; 

  when 28 =>
--# line 97 "vrml.l"
 return SHAPEHINTS_t; 

  when 29 =>
--# line 98 "vrml.l"
 return SPHERE; 

  when 30 =>
--# line 99 "vrml.l"
 return SPOTLIGHT; 

  when 31 =>
--# line 100 "vrml.l"
 return SWITCH; 

  when 32 =>
--# line 101 "vrml.l"
 return TEXTURE2; 

  when 33 =>
--# line 102 "vrml.l"
 return TEXTURE2TRANSFORM; 

  when 34 =>
--# line 103 "vrml.l"
 return TEXTURECOORDINATE2; 

  when 35 =>
--# line 104 "vrml.l"
 return TRANSFORM; 

  when 36 =>
--# line 105 "vrml.l"
 return TRANSFORMSEPARATOR; 

  when 37 =>
--# line 106 "vrml.l"
 return TRANSLATION; 

  when 38 =>
--# line 107 "vrml.l"
 return WWWANCHOR; 

  when 39 =>
--# line 108 "vrml.l"
 return WWWINLINE; 

  when 40 =>
--# line 110 "vrml.l"
 return PARTS; 

  when 41 =>
--# line 111 "vrml.l"
 return BOTTOMRADIUS; 

  when 42 =>
--# line 112 "vrml.l"
 return HEIGHT; 

  when 43 =>
--# line 113 "vrml.l"
 return POINT; 

  when 44 =>
--# line 114 "vrml.l"
 return WIDTH; 

  when 45 =>
--# line 115 "vrml.l"
 return DEPTH; 

  when 46 =>
--# line 116 "vrml.l"
 return STRING_t; 

  when 47 =>
--# line 117 "vrml.l"
 return SPACING; 

  when 48 =>
--# line 118 "vrml.l"
 return JUSTIFICATION; 

  when 49 =>
--# line 119 "vrml.l"
 return RADIUS; 

  when 50 =>
--# line 120 "vrml.l"
 return ON; 

  when 51 =>
--# line 121 "vrml.l"
 return INTENSITY; 

  when 52 =>
--# line 122 "vrml.l"
 return COLOR; 

  when 53 =>
--# line 123 "vrml.l"
 return DIRECTION; 

  when 54 =>
--# line 124 "vrml.l"
 return SIZE; 

  when 55 =>
--# line 125 "vrml.l"
 return FAMILY; 

  when 56 =>
--# line 126 "vrml.l"
 return STYLE; 

  when 57 =>
--# line 127 "vrml.l"
 return COORDINDEX; 

  when 58 =>
--# line 128 "vrml.l"
 return MATERIALINDEX; 

  when 59 =>
--# line 129 "vrml.l"
 return NORMALINDEX; 

  when 60 =>
--# line 130 "vrml.l"
 return TEXTURECOORDINDEX; 

  when 61 =>
--# line 131 "vrml.l"
 return RANGE_t; 

  when 62 =>
--# line 132 "vrml.l"
 return CENTER; 

  when 63 =>
--# line 133 "vrml.l"
 return SCREENAREA; 

  when 64 =>
--# line 134 "vrml.l"
 return AMBIENTCOLOR; 

  when 65 =>
--# line 135 "vrml.l"
 return DIFFUSECOLOR; 

  when 66 =>
--# line 136 "vrml.l"
 return SPECULARCOLOR; 

  when 67 =>
--# line 137 "vrml.l"
 return EMISSIVECOLOR; 

  when 68 =>
--# line 138 "vrml.l"
 return SHININESS; 

  when 69 =>
--# line 139 "vrml.l"
 return TRANSPARENCY; 

  when 70 =>
--# line 140 "vrml.l"
 return VALUE; 

  when 71 =>
--# line 141 "vrml.l"
 return MATRIX; 

  when 72 =>
--# line 142 "vrml.l"
 return VECTOR; 

  when 73 =>
--# line 143 "vrml.l"
 return POSITION; 

  when 74 =>
--# line 144 "vrml.l"
 return ORIENTATION; 

  when 75 =>
--# line 145 "vrml.l"
 return FOCALDISTANCE; 

  when 76 =>
--# line 146 "vrml.l"
 return HEIGHTANGLE; 

  when 77 =>
--# line 147 "vrml.l"
 return LOCATION; 

  when 78 =>
--# line 148 "vrml.l"
 return STARTINDEX; 

  when 79 =>
--# line 149 "vrml.l"
 return NUMPOINTS; 

  when 80 =>
--# line 150 "vrml.l"
 return ROTATION_F; 

  when 81 =>
--# line 151 "vrml.l"
 return SCALEFACTOR; 

  when 82 =>
--# line 152 "vrml.l"
 return RENDERCULLING; 

  when 83 =>
--# line 153 "vrml.l"
 return VERTEXORDERING; 

  when 84 =>
--# line 154 "vrml.l"
 return SHAPETYPE; 

  when 85 =>
--# line 155 "vrml.l"
 return FACETYPE; 

  when 86 =>
--# line 156 "vrml.l"
 return CREASEANGLE; 

  when 87 =>
--# line 157 "vrml.l"
 return DROPOFFRATE; 

  when 88 =>
--# line 158 "vrml.l"
 return CUTOFFANGLE; 

  when 89 =>
--# line 159 "vrml.l"
 return WHICHCHILD; 

  when 90 =>
--# line 160 "vrml.l"
 return FILENAME; 

  when 91 =>
--# line 161 "vrml.l"
 return IMAGE; 

  when 92 =>
--# line 162 "vrml.l"
 return WRAPS; 

  when 93 =>
--# line 163 "vrml.l"
 return WRAPT; 

  when 94 =>
--# line 164 "vrml.l"
 return SCALEORIENTATION; 

  when 95 =>
--# line 165 "vrml.l"
 return TRANSLATION_F; 

  when 96 =>
--# line 166 "vrml.l"
 return NAME; 

  when 97 =>
--# line 167 "vrml.l"
 return DESCRIPTION; 

  when 98 =>
--# line 168 "vrml.l"
 return MAP; 

  when 99 =>
--# line 169 "vrml.l"
 return BBOXSIZE; 

  when 100 =>
--# line 170 "vrml.l"
 return BBOXCENTER; 

  when 101 =>
--# line 172 "vrml.l"
 yylval.intval := VRML_justification'Pos(VRML_LEFT); 
                  return NUMBER; 

  when 102 =>
--# line 174 "vrml.l"
 yylval.intval := VRML_justification'Pos(VRML_CENTER);
                  return NUMBER; 

  when 103 =>
--# line 176 "vrml.l"
 yylval.intval := VRML_justification'Pos(VRML_RIGHT);
                  return NUMBER; 

  when 104 =>
--# line 179 "vrml.l"
 yylval.intval := Integer(VRML_SIDES);
                  return NUMBER; 

  when 105 =>
--# line 181 "vrml.l"
 yylval.intval := Integer(VRML_BOTTOM);
                  return NUMBER; 

  when 106 =>
--# line 183 "vrml.l"
 yylval.intval := Integer(VRML_TOP);
                  return NUMBER; 

  when 107 =>
--# line 185 "vrml.l"
 yylval.intval := Integer(VRML_ALL);
                  return NUMBER; 

  when 108 =>
--# line 188 "vrml.l"
 yylval.intval := 0; return NUMBER; 

  when 109 =>
--# line 189 "vrml.l"
 yylval.intval := 1; return NUMBER; 

  when 110 =>
--# line 191 "vrml.l"
 yylval.intval := VRML_font_family'Pos(VRML_SERIF); 
                  return NUMBER; 

  when 111 =>
--# line 193 "vrml.l"
 yylval.intval := VRML_font_family'Pos(VRML_SANS);
                  return NUMBER; 

  when 112 =>
--# line 195 "vrml.l"
 yylval.intval := VRML_font_family'Pos(VRML_TYPEWRITER);
                  return NUMBER; 

  when 113 =>
--# line 198 "vrml.l"
 yylval.intval := Integer(VRML_NONE);
                  return NUMBER; 

  when 114 =>
--# line 200 "vrml.l"
 yylval.intval := Integer(VRML_BOLD);
                  return NUMBER; 

  when 115 =>
--# line 202 "vrml.l"
 yylval.intval := Integer(VRML_ITALIC);
                  return NUMBER; 

  when 116 =>
--# line 205 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_DEFAULT);
                  return NUMBER; 

  when 117 =>
--# line 207 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_OVERALL);
                  return NUMBER; 

  when 118 =>
--# line 209 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_PART);
                  return NUMBER; 

  when 119 =>
--# line 211 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_PART_INDEXED);
                  return NUMBER; 

  when 120 =>
--# line 213 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_FACE);
                  return NUMBER; 

  when 121 =>
--# line 215 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_FACE_INDEXED);
                  return NUMBER; 

  when 122 =>
--# line 217 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_VERTEX);
                  return NUMBER; 

  when 123 =>
--# line 219 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_VERTEX_INDEXED);
                  return NUMBER; 

  when 124 =>
--# line 222 "vrml.l"
 yylval.intval := VRML_culling'Pos(VRML_ON);
                  return NUMBER; 

  when 125 =>
--# line 224 "vrml.l"
 yylval.intval := VRML_culling'Pos(VRML_OFF);
                  return NUMBER; 

  when 126 =>
--# line 226 "vrml.l"
 yylval.intval := VRML_culling'Pos(VRML_AUTO);
                  return NUMBER; 

  when 127 =>
--# line 229 "vrml.l"
 yylval.intval := VRML_vertex_ordering'Pos(VRML_UNKNOWN_ORDERING);
                  return NUMBER; 

  when 128 =>
--# line 231 "vrml.l"
 yylval.intval := VRML_vertex_ordering'Pos(VRML_CLOCKWISE);
                  return NUMBER; 

  when 129 =>
--# line 233 "vrml.l"
 yylval.intval := VRML_vertex_ordering'Pos(VRML_COUNTERCLOCKWISE);
                  return NUMBER; 

  when 130 =>
--# line 236 "vrml.l"
 yylval.intval := VRML_shape_type'Pos(VRML_UNKNOWN_SHAPE_TYPE);
                  return NUMBER; 

  when 131 =>
--# line 238 "vrml.l"
 yylval.intval := VRML_shape_type'Pos(VRML_SOLID);
                  return NUMBER; 

  when 132 =>
--# line 241 "vrml.l"
 yylval.intval := VRML_face_type'Pos(VRML_UNKNOWN_FACE_TYPE);
                  return NUMBER; 

  when 133 =>
--# line 243 "vrml.l"
 yylval.intval := VRML_face_type'Pos(VRML_CONVEX);
                  return NUMBER; 

  when 134 =>
--# line 246 "vrml.l"
 yylval.intval := VRML_wrap'Pos(VRML_REPEAT);
                  return NUMBER; 

  when 135 =>
--# line 248 "vrml.l"
 yylval.intval := VRML_wrap'Pos(VRML_CLAMP);
                  return NUMBER; 

  when 136 =>
--# line 251 "vrml.l"

                declare
                  c: Character;
                begin
                  loop
                    loop
                      Get(c);
                      exit when c=']' or End_of_File or c=ASCII.CR or c=ASCII.LF;
                    end loop;
                    if c=ASCII.CR or c=ASCII.LF then
                      linenum:= linenum + 1;
                    elsif c=']' then
                      return FIELDS;
                    else
                      YY_Terminate;
                      -- break;
                    end if;
                  end loop;
                  return FIELDS;
                end;
                

  when 137 =>
--# line 273 "vrml.l"
 yylval.intval   := 0;
                   yylval.floatval := 0.0;
                   return NUMBER;
                 

  when 138 =>
--# line 277 "vrml.l"
 yylval.intval := Integer'Value(yytext);
                   yylval.floatval:= Real( yylval.intval );
                   return NUMBER;

  when 139 =>
--# line 280 "vrml.l"
 yylval.intval := Integer'Value("8#"&yytext&'#');
                   yylval.floatval:= Real( yylval.intval );
                   return NUMBER;

  when 140 =>
--# line 284 "vrml.l"
 yylval.floatval := Real'Value(yytext);
                      return FLOAT_t;

  when 141 =>
--# line 286 "vrml.l"
 yylval.intval := Integer'Value("16#"&yytext&'#');
                   yylval.floatval:= Real( yylval.intval );
                   return NUMBER;

  when 142 =>
--# line 290 "vrml.l"
 -- Skip rest of line.
                      VRML_Comment(YYText);
                      linenum:= linenum + 1;
                    

  when 143 =>
--# line 295 "vrml.l"
return VRMLSTRING;

--\"                {
--                declare
--                  c,oldc: Integer;
--                begin
--                  char *buffer;
--                  int buflen=8;
--                  int len=0;
--                  c := EOF;
--                  buffer := (char *)malloc(buflen);
--                  if (!buffer)
--                    yyterminate();
--                  buffer[0] := '\0';
--                  for (;;) {
--                    oldc := c;
--                    c := input();
--                    if (c=='\"') {
--                      if (oldc=='\\') {
--                        buffer[len-1] := '\"';
--                      } else {
--                        yylval.string := buffer;
--                        return VRMLSTRING;
--                      }
--                    } else {
--                      if (len+2 >= buflen) {
--                        buflen *= 2;
--                        buffer := (char *)realloc(buffer, buflen);
--                        if (!buffer)
--                      yyterminate();
--                      }
--                      buffer[len] := c;
--                      buffer[++len] := '\0';
--                    }
--                  }
--                  return VRMLSTRING;
--                end;
--                }
  when 144 =>
--# line 336 "vrml.l"
 null; -- \t  ;

  when 145 =>
--# line 337 "vrml.l"
linenum:= linenum+1;

--{ID}                {
--                declare
--                  c: Integer;
--                begin
--                  register int c;
--                  int stack := 0;
--                  for ( ; ; ) {
--                    do {
--                      c := input();
--                    } while (c!='{' && c!='}' && c!=EOF &&
--                         c!='\n');
--                    if (c=='{') {
--                      stack ++;
--                    } else if (c=='}') {
--                      stack --;
--                    } else if (c=='\n') {
--                      linenum ++;
--                    } else {
--                      yyterminate();
--                      break;
--                    }
--                    if (!stack)
--                      break;
--                  }
--                  return UNKNOWNNODE;
--                end;
--                }
  when 146 =>
--# line 368 "vrml.l"
return VRMLWORD;

  when 147 =>
--# line 370 "vrml.l"
 null; -- ??
                     -- C: return *yytext;
                   

  when 148 =>
--# line 373 "vrml.l"
 return ','; 

  when 149 =>
--# line 374 "vrml.l"
 return '}'; 

  when 150 =>
--# line 375 "vrml.l"
 return '{'; 

  when 151 =>
--# line 376 "vrml.l"
 return '['; 

  when 152 =>
--# line 377 "vrml.l"
 return ']'; 

  when 153 =>
--# line 379 "vrml.l"
 Put_Line(Standard_Error, 
                   -- current_file'img & ' ' & 
                   Integer'Image(linenum) & " Warning:");
                   Put_Line(Standard_Error, "Skipping illegal input" & yytext);

  when 154 =>
--# line 384 "vrml.l"
ECHO;
when YY_END_OF_BUFFER + INITIAL + 1 =>
    return End_Of_Input;
                when YY_END_OF_BUFFER =>
                    -- undo the effects of YY_DO_BEFORE_ACTION
                    yy_ch_buf(yy_cp) := yy_hold_char;

                    yytext_ptr := yy_bp;

                    case yy_get_next_buffer is
                        when EOB_ACT_END_OF_FILE =>
                            begin
                            if yyWrap then
                                -- note: because we've taken care in
                                -- yy_get_next_buffer() to have set up yytext,
                                -- we can now set up yy_c_buf_p so that if some
                                -- total hoser (like aflex itself) wants
                                -- to call the scanner after we return the
                                -- End_Of_Input, it'll still work - another
                                -- End_Of_Input will get returned.

                                yy_c_buf_p := yytext_ptr;

                                yy_act := YY_STATE_EOF((yy_start - 1) / 2);

                                goto do_action;
                            else
                                --  Start processing a new file
                                yy_init := True;
                                goto new_file;
                            end if;
                            end;
                        when EOB_ACT_RESTART_SCAN =>
                            yy_c_buf_p := yytext_ptr;
                            yy_hold_char := yy_ch_buf (yy_c_buf_p);
                        when EOB_ACT_LAST_MATCH =>
                            yy_c_buf_p := yy_n_chars;
                            yy_current_state := yy_get_previous_state;

                            yy_cp := yy_c_buf_p;
                            yy_bp := yytext_ptr;
                            goto next_action;
                        when others => null;
                        end case;  --  case yy_get_next_buffer()
                when others =>
                    Text_IO.Put ("action # ");
                    Text_IO.Put (Integer'Image (yy_act));
                    Text_IO.New_Line;
                    raise AFLEX_INTERNAL_ERROR;
            end case;  --  case (yy_act)
        end loop;  --  end of loop waiting for end of file
end YYLex;
