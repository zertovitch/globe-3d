--  Warning: This lexical scanner is automatically generated by AFLEX.
--  *******   It is useless to modify it. Change the ".Y" & ".L" files instead.
with Text_IO; use Text_IO;
with vrml_dfa; use vrml_dfa;
with vrml_io; use vrml_io;
--# line 1 "vrml.l"
-- *---------------------------------------------------------------------------*
-- *  vrml.l                                                                 
-- *                                                                           
-- * Project: SICS DIVE
-- * Copyright: SICS
-- * Implemented by: Emmanuel Frecon and Olof Hagsand
-- *
-- * This file contains lex declarations for a VRML Parser.
-- *
-- *---------------------------------------------------------------------------*
--  /*==========================================================================
--    Local variables
--    ==========================================================================*/
--  static char rcsid[] := "$Id: file.l,v 1.6 1995/05/26 12:13:16 olof Exp $";
--  static void print_rcsid() {if (1) fprintf(stdout,"%s", rcsid); else print_rcsid();}
--  static int linenum := 1;
--  static char current_file[128];
--  /* #undef   ECHO*/
--  #include <string.h>
--  #include "vrml.tab.h"
--  #include "vrml.h"
--  #undef yywrap
--  int yywrap()
--  {
--    return 1;
--  } 
--  %}
--  /*****************************************************************************/
--  /* lexical definitions */
--  /*****************************************************************************/
--  %e 1800
--  %p 14000
--  %a 22000
--  %n 2000
--  %s use_and_def
--  /* The definition of an instance is not exactly correct, it should also
--     exclude control characters, this could be done by [:cntrl:] with flex
--     and [\0-\37] with lex. */
-- INSTANCE    [^0-9{}\'\"\\ \t\n\f]*
-- INSTANCE [{}\'\"\\]*
-- ID   [A-Za-z_][0-9A-Za-z_]*
-- VRMLWORD    [A-Za-z_][0-9A-Za-z_]*
--# line 60 "vrml.l"


with VRML_Tokens; use VRML_Tokens;
with VRML_Help;   use VRML_Help;

--/*
--\"[^\"]*\"            {
--                       yytext[strlen(yytext) - 1] := '\0';
--                      yylval.string := strdup(yytext + 1);
--                  return VRMLSTRING;
--                }
--fields                { BEGIN(field); return FIELDS; }
--<field>"]"            { BEGIN(INITIAL); return ']'; }
--<field>[^\]\n]*            ;
--<field>\n            linenum ++;
--{ID}                { BEGIN(newnode); return UNKNOWNNODE; }
--<newnode>"}"            { BEGIN(INITIAL); return '}'; }
--<newnode>[^\}\n]*        ;
--<newnode>\n            linenum ++;
--*/

--int vrml_filel_linenum(char **file)
--{
--  *file := current_file;
--  return linenum;
--}

--void vrml_filel_init(FILE *f, char *file_name)
--{
--#ifdef FLEX_SCANNER
--  static int firstcall := 1;
--#endif

--  linenum := 1;
--  strcpy(current_file, file_name);

--#ifdef FLEX_SCANNER
--  if (!firstcall)
--    yyrestart(yyin=f);
--  else {
--    firstcall := 0;
--    yyin := f;
--  }
--#else /* FLEX_SCANNER */
--  yyin := f;
--#endif /* FLEX_SCANNER */
--}

function YYLex return Token is

subtype Short is Integer range -32768 .. 32767;
    yy_act : Integer;
    yy_c   : Short;

-- returned upon end-of-file
YY_END_TOK : constant Integer := 0;
YY_END_OF_BUFFER : constant := 155;
subtype yy_state_type is Integer;
yy_current_state : yy_state_type;
INITIAL : constant := 0;
yy_accept : constant array(0..994) of Short :=
    (   0,
      140,  140,  155,  153,  144,  145,  153,  153,  148,  140,
      140,  137,  138,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  151,  152,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  150,  147,  149,  144,    0,  143,    0,
      142,  140,  140,  138,    0,  140,  139,    0,  138,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,    0,  140,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  124,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,   50,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  140,  139,  141,  107,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,    1,  146,  146,  146,  146,  146,  146,  146,  146,
       14,  146,  146,  146,  146,  125,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  106,  146,  146,  146,  146,  146,
        2,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   98,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  126,  146,  114,
      146,  146,  146,  146,  146,  146,    4,  146,    6,  146,
      146,  146,  146,  146,  146,  146,  146,   13,  101,  146,

      146,  146,  113,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  111,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  108,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,   96,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
       54,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  135,  146,  146,
      146,  146,  146,  146,  146,  109,  146,   10,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  103,  146,  110,  104,  131,   26,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,   52,  146,  146,  146,   45,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
       91,  146,  146,  146,  146,  146,  146,  146,  146,   40,
       43,  146,  146,   61,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,   56,  146,  146,   70,  146,  146,
      146,   44,   92,   93,  146,  105,  102,  146,  133,  146,
      146,  146,  146,  146,  146,  115,  146,  146,  146,  146,

       19,  146,  146,  146,  146,  146,  146,  146,  146,  134,
      146,  146,  146,   29,  146,   31,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,   62,  146,  146,
      146,  146,  146,  146,  146,  146,  146,   55,  136,  146,
      146,   42,  146,  146,  146,  146,   71,  146,  146,  146,
      146,   49,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,   46,  146,  146,  146,   72,  146,  146,  146,
      146,  146,  146,  146,  116,  146,  146,  146,  146,  146,
      146,  146,  117,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,   47,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,    7,  146,  146,  146,  146,  146,
       16,  146,  146,  146,  120,  118,  146,  146,  146,   24,
       25,  146,  146,  146,  146,   32,  146,  146,  146,  146,
      146,  146,  146,  146,   99,  146,  146,  146,  146,  146,
      146,  146,  146,  146,   85,   90,  146,  146,  146,  146,
       77,  146,  146,  146,  146,   73,  146,   80,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
        3,  128,  146,  146,  146,    9,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,   27,  146,
       30,  146,  146,  146,   35,  146,  146,  146,  146,   38,
       39,  146,  146,  146,  146,  146,  146,  146,  146,   53,
      146,  146,  146,  146,   51,  146,  146,  146,   79,  146,
      146,  146,  146,  146,   84,   68,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  122,  146,   23,   28,  112,
      146,  146,  146,  146,  146,  146,  146,  146,  100,  146,

       57,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   63,  146,   78,  146,
      146,  146,  146,   89,  146,    5,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,   37,  146,  146,  146,  146,  146,   86,   88,   97,
      146,   87,  146,  146,   76,  146,  146,   59,   74,  146,
       81,  146,  146,  146,   95,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   64,   41,   65,  146,
      146,  146,  146,  146,  146,  146,  146,   69,  146,  146,

      146,  146,  146,   15,  146,  146,   20,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,   67,   75,
       48,   58,   82,  146,   66,  146,  146,  146,  146,   11,
       12,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   83,  146,  146,   17,
       18,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  129,    8,  146,  121,  119,  146,
      146,  146,  146,  146,  146,  127,  146,   94,  146,  146,
      146,   22,   33,  146,  146,  132,  146,   60,   21,  123,
       34,   36,  130,    0

    ) ;

yy_ec : constant array (ASCII.NUL..Character'Last) of Short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   11,   11,   11,   11,   14,   14,    1,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       24,   31,   32,   33,   34,   35,   36,   37,   38,   24,
       39,    1,   40,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   24,   52,   53,   54,
       55,   56,   24,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,    1,    1, others=> 1

    ) ;

yy_meta : constant array (0 ..68) of Short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        3,    2,    2,    2,    2,    2,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1,    1
    ) ;

yy_base : constant array(0..998) of Short :=
    (   0,
        0,    0, 1124, 1125, 1121, 1125, 1118, 1118, 1125,   60,
       70,   81,   99,   62, 1091,   78,   67,  118,   60, 1062,
        0,   44,  106, 1076,   47,  119,   59,  100,  134,  105,
       71, 1081, 1125, 1125, 1063,  103,  104,   91,  159,  124,
     1069,   68, 1054, 1058, 1070,  126,  128,  133,  145,  145,
      146,  114,  148, 1125, 1125, 1125, 1109, 1106, 1125, 1106,
     1125,  196,  207,  218,  233,  238,  249,    0,  260,    0,
     1082, 1074, 1062,  151, 1077,   72,  165,  159, 1061, 1051,
     1082, 1044,  275,  280, 1074, 1045, 1043, 1082,  177, 1076,
     1077, 1033, 1034, 1064, 1034, 1070,    0, 1070, 1029, 1056,

     1029, 1035, 1054, 1062, 1023, 1053, 1049, 1061, 1052, 1035,
     1020, 1033,  185, 1024, 1043, 1038, 1041, 1007, 1027, 1043,
     1048, 1030, 1022, 1009, 1004, 1008,  181, 1015, 1001,  167,
      208, 1004, 1008,  158,  229, 1013, 1006, 1013,  995,  995,
     1008,  179,  998,  993,  996,    0,  998,  990,  246,  222,
      992,  986,  240,  257,  979,  256,  258,  980, 1000,  989,
      257,  990,  994,  996,  298,  307,    0,    0, 1008,  986,
     1017, 1001, 1000, 1005, 1014,  995, 1001,  982,  970,  980,
      975, 1009,  977,  990,  962,  960,  993,  972,  962,  983,
        0,  969,  220,  995,  960,    0,  981,  962,  969,  951,

      954,  988,  984,  963,  972,  980,  983,  978,  948,  957,
      942,  951,  937,  936,    0,  975,  974,  933,  937,  962,
        0,  290,  939,  925,  928,  927,  930,  927,  941,  953,
      922,  936,  932,  932,  921,  918,  929,  924,  921,  926,
      929,  922,  921,  922,  908,  924,    0,  277,  919,  911,
      933,  916,  902,  906,  909,  908,  909,  911,  913,  902,
      907,  896,  897,  904,  905,  904,  890,  896,  893,  885,
      889,  882,  882,  881,  895,  879,  881,    0,  886,    0,
      906,  915,  903,  907,  912,  897,    0,  884,    0,  874,
      893,  882,  906,  892,  867,  899,  858,    0,    0,  868,

      862,  868,    0,  875,  901,  860,  305,  858,  854,  897,
      878,  851,    0,  889,  876,  889,  860,  848,  858,  846,
      876,  857,    0,  864,  839,  840,  868,  842,  841,  848,
      307,  838,  846,  834,  845,  831,  841,  838,  829,  825,
      840,  854,  824,  848,  828,  834,  824,  825,  827,  829,
      820,  823,  813,  814,  820,    0,  827,  813,  813,  808,
      806,  805,  803,  816,  815,  801,  813,  812,  811,  806,
        0,  805,  794,  794,  798,  805,  790,  791,  802,  792,
      800,  796,  795,  295,  810,  815,  810,    0,  804,  802,
      819,  787,  791,  809,  775,    0,  774,    0,  815,  785,

      801,  779,  765,  775,  800,  777,  809,  808,  803,  775,
      304,  787,    0,  769,    0,    0,    0,    0,  776,  795,
      770,  765,  765,  782,  755,  231,  775,  766,  757,  754,
      761,  756,  752,  747,    0,  780,  756,  754,    0,  750,
      741,  739,  750,  746,  731,  730,  735,  750,  773,  731,
        0,  731,  741,  737,  736,  722,  732,  733,  723,    0,
        0,  731,  722,    0,  722,  728,  309,  723,  743,  721,
      720,  721,  749,  723,    0,  713,  281,    0,  712,  705,
      750,    0,    0,    0,  720,    0,    0,  742,    0,  733,
      709,  716,  728,  710,  695,    0,  713,  710,  714,  722,

      738,  727,  695,  734,  719,  718,  704,  697,  700,    0,
      690,  685,  693,    0,  694,    0,  718,  694,  684,  696,
      709,  687,  685,  675,  679,  667,  700,    0,  676,  714,
      713,  671,  680,  675,  677,  662,  666,    0,    0,  668,
      670,  704,  668,  667,  661,  673,    0,  691,  659,  670,
      656,    0,  693,  654,  666,  650,  691,  641,  658,  655,
      660,  647,    0,  654,  657,  656,    0,  668,  647,  632,
      662,  676,  650,  634,    0,  635,  637,  321,  670,  635,
      629,  635,    0,  642,  664,  649,  648,  621,  631,  619,
      623,  621,  621,  625,  640,  331,  615,  612,  629,  614,

      614,  650,  607,  619,  622,  618,  608,  607,  601,  642,
      603,  626,  610,  609,  608,  595,  598,  592,  606,  595,
      596,  593,  587,  586,  590,  583,  588,  597,  590,  582,
      582,  579,    0,  579,  590,  617,  574,  575,  574,  580,
      570,  609,  601,  567,    0,   31,   94,  212,  206,  234,
      287,  289,  278,  286,  303,  304,  327,  299,  301,    0,
        0,  294,  293,  295,  336,  323,  302,  305,  309,  340,
      304,  316,  308,  318,    0,  320,  320,  319,  320,  320,
      316,  319,  332,  358,    0,    0,  317,  329,  314,  337,
        0,  357,  336,  324,  333,    0,  332,    0,  326,  340,

      341,  342,  331,  373,  345,  337,  343,  348,  350,  344,
        0,    0,  368,  352,  357,    0,  356,  347,  343,  353,
      350,  360,  357,  384,  385,  372,  349,  352,    0,  354,
        0,  382,  357,  360,  384,  362,  403,  388,  398,    0,
        0,  369,  365,  373,  361,  373,  374,  372,  376,    0,
      370,  375,  389,  380,    0,  374,  380,  389,    0,  381,
      385,  383,  385,  398,    0,    0,  386,  379,  388,  389,
      391,  400,  402,  431,  436,  398,  405,  406,  411,  400,
      397,  406,  407,  430,  431,  419,  415,    0,    0,    0,
      420,  406,  418,  411,  449,  449,  453,  414,    0,  410,

        0,  425,  426,  419,  419,  429,  424,  423,  432,  429,
      435,  418,  428,  433,  427,  426,    0,  434,    0,  430,
      434,  445,  433,    0,  466,    0,  466,  461,  462,  445,
      451,  450,  444,  455,  482,  483,  479,  486,  450,  460,
      450,    0,  488,  489,  479,  453,  453,    0,    0,    0,
      455,    0,  458,  470,    0,  460,  470,    0,    0,  463,
        0,  476,  464,  475,    0,  457,  472,  487,  474,  479,
      480,  475,  478,  474,  482,  514,  513,  514,  506,  493,
      478,  487,  496,  498,  509,  522,    0,    0,    0,  485,
      497,  490,  482,  498,  488,  491,  526,    0,  496,  528,

      504,  494,  495,    0,  501,  499,    0,  515,  521,  522,
      542,  508,  515,  509,  507,  532,  543,  526,    0,    0,
        0,    0,    0,  518,    0,  515,  522,  539,  523,    0,
        0,  525,  521,  522,  557,  558,  559,  533,  525,  539,
      540,  545,  556,  552,  531,  542,    0,  569,  530,    0,
        0,  544,  573,  574,  556,  537,  538,  537,  538,  568,
      578,  562,  547,  556,    0,    0,  546,    0,    0,  585,
      563,  553,  561,  553,  590,    0,  580,    0,  548,  570,
      595,    0,    0,  602,  558,    0,  597,    0,    0,    0,
        0,    0,    0, 1125,  616,  619,  621,  623

    ) ;

yy_def : constant array (0 ..998) of Short :=
    (   0,
      994,    1,  994,  994,  994,  994,  995,  996,  994,  994,
      994,  994,  994,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  994,  994,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  994,  994,  994,  994,  995,  994,  996,
      994,  994,  994,  994,  994,  994,  994,  998,  994,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  994,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  994,  994,  998,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,    0,  994,  994,  994,  994

    ) ;

yy_nxt : constant array (0 ..1193) of Short :=
    (   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   13,   13,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   21,   21,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   21,   32,   21,   21,   33,   34,
       21,   35,   36,   37,   38,   39,   40,   21,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   21,
       52,   53,   21,   21,   21,   54,   55,   56,   62,   63,
       64,   64,   64,   64,   85,   94,   88,  100,   65,   66,
       66,   66,   66,   66,  715,   81,  174,   71,   65,   62,
       63,   67,   67,   67,   63,   72,   75,   89,  120,   65,

      175,   95,  121,   76,  101,   65,   77,   62,   69,   69,
       69,   69,   69,  102,   86,   65,   82,   65,  103,   73,
      138,  139,  104,   83,   90,   83,   65,   84,   84,   84,
       84,   84,   78,  115,   91,  116,  130,   79,   96,  716,
      131,   80,  117,   68,   65,  124,   97,  132,  106,  126,
      118,   92,  107,   98,  105,  160,  108,  125,  127,  161,
      128,  119,  109,  129,   83,  134,   83,  143,   84,   84,
       84,   84,   84,  135,  148,   99,  171,  110,  136,  111,
      144,  146,  112,  172,  147,  145,  150,  149,  153,  113,
      151,  158,  176,  154,  155,  114,  162,  163,  177,  152,

      156,  237,  159,  157,  164,   66,   66,   66,   66,   66,
      238,  133,  178,  179,   65,   62,   63,   63,   63,   63,
       63,  188,  231,  189,  232,   65,   62,   69,   69,   69,
       69,   69,  227,  212,  247,  228,   65,  248,   83,  213,
       83,   65,  165,  165,  165,  165,  165,   66,   66,   66,
       66,   66,   65,  717,  233,  718,   65,   62,  166,  166,
      166,  166,   63,   65,  234,  301,  256,   65,   62,   69,
       69,   69,   69,   69,  239,  257,  302,  519,   65,  719,
      240,  260,  520,   65,  165,  165,  165,  165,  165,   84,
       84,   84,   84,   84,   65,  254,  261,  265,  262,  267,

      273,  266,  720,  255,  328,   65,  263,  165,  165,  165,
      165,  165,  329,  274,  268,   62,  166,  166,  166,  166,
       63,  269,  354,  431,  407,   65,  483,  484,  555,  508,
      721,  722,  565,  355,  408,  509,  566,  556,  432,  409,
      648,  723,  666,  724,  725,  726,  649,  667,  727,  728,
      729,  730,   65,  731,  732,  733,  734,  735,  736,  737,
      740,  741,  742,  743,  744,  745,  746,  747,  738,  748,
      749,  739,  750,  751,  752,  753,  754,  755,  756,  757,
      758,  759,  760,  761,  762,  763,  764,  765,  766,  767,
      768,  769,  770,  771,  772,  773,  774,  775,  776,  777,

      778,  779,  780,  781,  782,  783,  784,  785,  786,  787,
      788,  789,  790,  791,  792,  793,  794,  795,  796,  797,
      798,  799,  800,  801,  802,  803,  804,  805,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  816,  817,
      818,  819,  820,  821,  822,  823,  824,  825,  826,  827,
      828,  829,  830,  831,  832,  833,  834,  835,  836,  837,
      838,  839,  840,  841,  842,  843,  844,  845,  846,  847,
      848,  849,  850,  851,  852,  853,  854,  855,  856,  857,
      858,  859,  860,  861,  862,  863,  864,  865,  866,  867,
      868,  869,  870,  871,  872,  873,  874,  875,  876,  877,

      878,  879,  880,  881,  882,  883,  884,  885,  886,  887,
      888,  889,  890,  891,  892,  893,  894,  895,  896,  897,
      898,  899,  900,  901,  902,  903,  904,  905,  906,  907,
      908,  909,  910,  911,  912,  913,  914,  915,  916,  917,
      918,  919,  920,  921,  922,  923,  924,  925,  926,  927,
      928,  929,  930,  931,  932,  933,  934,  935,  936,  937,
      938,  939,  940,  941,  942,  943,  944,  945,  946,  947,
      948,  949,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  959,  960,  961,  962,  963,  964,  965,  966,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  976,  977,

      978,  979,  980,  981,  982,  983,  984,  985,  986,  987,
      988,  989,  990,  991,  992,  993,   58,   58,   58,   60,
       60,   60,   70,   70,  167,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,
      699,  698,  697,  696,  695,  694,  693,  692,  691,  690,
      689,  688,  687,  686,  685,  684,  683,  682,  681,  680,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  665,  664,  663,  662,  661,  660,  659,  658,
      657,  656,  655,  654,  653,  652,  651,  650,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,

      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  611,  610,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  564,
      563,  562,  561,  560,  559,  558,  557,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,

      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,
      521,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,
      487,  486,  485,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  430,  429,  428,  427,  426,  425,  424,

      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,

      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      272,  271,  270,  264,  259,  258,  253,  252,  251,  250,
      249,  246,  245,  244,  243,  242,  241,  236,  235,  230,
      229,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  211,  210,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  190,  187,  186,  185,  184,

      183,  182,  181,  180,  173,  170,  169,  168,   61,   59,
       57,  142,  141,  140,  137,  123,  122,   93,   87,   74,
       61,   59,   57,  994,    3,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994

    ) ;

yy_chk : constant array (0 ..1193) of Short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   10,   10,
       10,   10,   10,   10,   19,   25,   22,   27,   10,   11,
       11,   11,   11,   11,  646,   17,   76,   14,   11,   12,
       12,   12,   12,   12,   12,   14,   16,   22,   31,   12,

       76,   25,   31,   16,   27,   10,   16,   13,   13,   13,
       13,   13,   13,   27,   19,   11,   17,   13,   28,   14,
       42,   42,   28,   18,   23,   18,   12,   18,   18,   18,
       18,   18,   16,   30,   23,   30,   38,   16,   26,  647,
       38,   16,   30,   12,   13,   36,   26,   38,   29,   37,
       30,   23,   29,   26,   28,   52,   29,   36,   37,   52,
       37,   30,   29,   37,   39,   40,   39,   46,   39,   39,
       39,   39,   39,   40,   48,   26,   74,   29,   40,   29,
       46,   47,   29,   74,   47,   46,   49,   48,   50,   29,
       49,   51,   77,   50,   50,   29,   53,   53,   77,   49,

       50,  134,   51,   50,   53,   62,   62,   62,   62,   62,
      134,   39,   78,   78,   62,   63,   63,   63,   63,   63,
       63,   89,  130,   89,  130,   63,   64,   64,   64,   64,
       64,   64,  127,  113,  142,  127,   64,  142,   65,  113,
       65,   62,   65,   65,   65,   65,   65,   66,   66,   66,
       66,   66,   63,  648,  131,  649,   66,   67,   67,   67,
       67,   67,   67,   64,  131,  193,  150,   67,   69,   69,
       69,   69,   69,   69,  135,  150,  193,  426,   69,  650,
      135,  153,  426,   66,   83,   83,   83,   83,   83,   84,
       84,   84,   84,   84,   67,  149,  153,  156,  154,  157,

      161,  156,  651,  149,  222,   69,  154,  165,  165,  165,
      165,  165,  222,  161,  157,  166,  166,  166,  166,  166,
      166,  157,  248,  331,  307,  166,  384,  384,  467,  411,
      652,  653,  477,  248,  307,  411,  477,  467,  331,  307,
      578,  654,  596,  655,  656,  657,  578,  596,  658,  659,
      662,  663,  166,  664,  665,  666,  667,  668,  669,  670,
      671,  672,  673,  674,  676,  677,  678,  679,  670,  680,
      681,  670,  682,  683,  684,  687,  688,  689,  690,  692,
      693,  694,  695,  697,  699,  700,  701,  702,  703,  704,
      705,  706,  707,  708,  709,  710,  713,  714,  715,  717,

      718,  719,  720,  721,  722,  723,  724,  725,  726,  727,
      728,  730,  732,  733,  734,  735,  736,  737,  738,  739,
      742,  743,  744,  745,  746,  747,  748,  749,  751,  752,
      753,  754,  756,  757,  758,  760,  761,  762,  763,  764,
      767,  768,  769,  770,  771,  772,  773,  774,  775,  776,
      777,  778,  779,  780,  781,  782,  783,  784,  785,  786,
      787,  791,  792,  793,  794,  795,  796,  797,  798,  800,
      802,  803,  804,  805,  806,  807,  808,  809,  810,  811,
      812,  813,  814,  815,  816,  818,  820,  821,  822,  823,
      825,  827,  828,  829,  830,  831,  832,  833,  834,  835,

      836,  837,  838,  839,  840,  841,  843,  844,  845,  846,
      847,  851,  853,  854,  856,  857,  860,  862,  863,  864,
      866,  867,  868,  869,  870,  871,  872,  873,  874,  875,
      876,  877,  878,  879,  880,  881,  882,  883,  884,  885,
      886,  890,  891,  892,  893,  894,  895,  896,  897,  899,
      900,  901,  902,  903,  905,  906,  908,  909,  910,  911,
      912,  913,  914,  915,  916,  917,  918,  924,  926,  927,
      928,  929,  932,  933,  934,  935,  936,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  948,  949,  952,
      953,  954,  955,  956,  957,  958,  959,  960,  961,  962,

      963,  964,  967,  970,  971,  972,  973,  974,  975,  977,
      979,  980,  981,  984,  985,  987,  995,  995,  995,  996,
      996,  996,  997,  997,  998,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  632,  631,  630,  629,
      628,  627,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  582,  581,  580,  579,  577,  576,
      574,  573,  572,  571,  570,  569,  568,  566,  565,  564,

      562,  561,  560,  559,  558,  557,  556,  555,  554,  553,
      551,  550,  549,  548,  546,  545,  544,  543,  542,  541,
      540,  537,  536,  535,  534,  533,  532,  531,  530,  529,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  515,  513,  512,  511,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  495,  494,
      493,  492,  491,  490,  488,  485,  481,  480,  479,  476,
      474,  473,  472,  471,  470,  469,  468,  466,  465,  463,
      462,  459,  458,  457,  456,  455,  454,  453,  452,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,

      438,  437,  436,  434,  433,  432,  431,  430,  429,  428,
      427,  425,  424,  423,  422,  421,  420,  419,  414,  412,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  397,  395,  394,  393,  392,  391,  390,  389,
      387,  386,  385,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  330,  329,  328,  327,  326,  325,  324,

      322,  321,  320,  319,  318,  317,  316,  315,  314,  312,
      311,  310,  309,  308,  306,  305,  304,  302,  301,  300,
      297,  296,  295,  294,  293,  292,  291,  290,  288,  286,
      285,  284,  283,  282,  281,  279,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  220,
      219,  218,  217,  216,  214,  213,  212,  211,  210,  209,

      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  195,  194,  192,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  169,  164,  163,  162,
      160,  159,  158,  155,  152,  151,  148,  147,  145,  144,
      143,  141,  140,  139,  138,  137,  136,  133,  132,  129,
      128,  126,  125,  124,  123,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  112,  111,  110,  109,  108,  107,
      106,  105,  104,  103,  102,  101,  100,   99,   98,   96,
       95,   94,   93,   92,   91,   90,   88,   87,   86,   85,

       82,   81,   80,   79,   75,   73,   72,   71,   60,   58,
       57,   45,   44,   43,   41,   35,   32,   24,   20,   15,
        8,    7,    5,    3,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994

    ) ;

  --  Copy whatever the last rule matched to the standard output

  procedure ECHO is
  begin
    if Text_IO.Is_Open (user_output_file) then
      Text_IO.Put ( user_output_file, YYText );
    else
      Text_IO.Put ( YYText );
    end if;
  end ECHO;

  --  enter a start condition.
  --  Using procedure requires a () after the ENTER, but makes everything
  --  much neater.

  procedure ENTER ( state : Integer ) is
  begin
    yy_start := 1 + 2 * state;
  end ENTER;

  -- action number for EOF rule of a given start state
  function YY_STATE_EOF (state : Integer) return Integer is
  begin
    return YY_END_OF_BUFFER + state + 1;
  end YY_STATE_EOF;

  -- return all but the first 'n' matched characters back to the input stream
  procedure yyless (n : Integer) is
  begin
    yy_ch_buf(yy_cp) := yy_hold_char;  --  undo effects of setting up yytext
    yy_cp := yy_bp + n;
    yy_c_buf_p := yy_cp;
    YY_DO_BEFORE_ACTION;  --  set up yytext again
  end yyless;

  -- redefine this if you have something you want each time.
  procedure YY_USER_ACTION is
  begin
    null;
  end YY_USER_ACTION;

  --  yy_get_previous_state - get the state just before the EOB char was reached

  function yy_get_previous_state return yy_state_type is
    yy_current_state : yy_state_type;
    yy_c : Short;
begin
    yy_current_state := yy_start;

    for yy_cp in yytext_ptr..yy_c_buf_p - 1 loop
        yy_c := yy_ec(yy_ch_buf(yy_cp));
        if yy_accept(yy_current_state) /= 0 then
            yy_last_accepting_state := yy_current_state;
            yy_last_accepting_cpos := yy_cp;
        end if;
        while yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state loop
            yy_current_state := yy_def(yy_current_state);
            if yy_current_state >= 995 then
                yy_c := yy_meta(yy_c);
            end if;
        end loop;
        yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
    end loop;

    return yy_current_state;
  end yy_get_previous_state;

  procedure yyrestart( input_file : File_Type ) is
  begin
    Open_Input (Text_IO.Name (input_file));
  end yyrestart;

begin  --  of YYLex
<<new_file>>
        --  This is where we enter upon encountering an end-of-file and
        --  yyWrap() indicating that we should continue processing

    if yy_init then
        if yy_start = 0 then
          yy_start := 1;      --  first start state
        end if;

        --  We put in the '\n' and start reading from [1] so that an
        --  initial match-at-newline will be true.

        yy_ch_buf(0) := ASCII.LF;
        yy_n_chars := 1;

        --  We always need two end-of-buffer characters. The first causes
        --  a transition to the end-of-buffer state. The second causes
        --  a jam in that state.

        yy_ch_buf(yy_n_chars) := YY_END_OF_BUFFER_CHAR;
        yy_ch_buf(yy_n_chars + 1) := YY_END_OF_BUFFER_CHAR;

        yy_eof_has_been_seen := False;

        yytext_ptr := 1;
        yy_c_buf_p := yytext_ptr;
        yy_hold_char := yy_ch_buf(yy_c_buf_p);
        yy_init := False;
-- UMASS CODES :
--   Initialization
        tok_begin_line := 1;
        tok_end_line   := 1;
        tok_begin_col := 0;
        tok_end_col   := 0;
        token_at_end_of_line := False;
        line_number_of_saved_tok_line1 := 0;
        line_number_of_saved_tok_line2 := 0;
-- END OF UMASS CODES.
    end if;  --  yy_init

    loop                -- loops until end-of-file is reached

-- UMASS CODES :
--    if last matched token is end_of_line, we must
--    update the token_end_line and reset tok_end_col.
    if Token_At_End_Of_Line then
      Tok_End_Line := Tok_End_Line + 1;
      Tok_End_Col := 0;
      Token_At_End_Of_Line := False;
    end if;
-- END OF UMASS CODES.

        yy_cp := yy_c_buf_p;

        -- support of yytext
        yy_ch_buf(yy_cp) := yy_hold_char;

        -- yy_bp points to the position in yy_ch_buf of the start of the
        -- current run.
        yy_bp := yy_cp;
        yy_current_state := yy_start;
        loop
                yy_c := yy_ec(yy_ch_buf(yy_cp));
                if yy_accept(yy_current_state) /= 0 then
                    yy_last_accepting_state := yy_current_state;
                    yy_last_accepting_cpos := yy_cp;
                end if;
                while yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state loop
                    yy_current_state := yy_def(yy_current_state);
                    if yy_current_state >= 995 then
                        yy_c := yy_meta(yy_c);
                    end if;
                end loop;
                yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
            yy_cp := yy_cp + 1;
if yy_current_state = 994 then
    exit;
end if;
        end loop;
        yy_cp := yy_last_accepting_cpos;
        yy_current_state := yy_last_accepting_state;

<<next_action>>
            yy_act := yy_accept(yy_current_state);
            YY_DO_BEFORE_ACTION;
            YY_USER_ACTION;

        if aflex_debug then  --  Output acceptance info. for (-d) debug mode
            Text_IO.Put (Standard_Error, "--accepting rule #");
            Text_IO.Put (Standard_Error, Integer'Image (yy_act));
            Text_IO.Put_Line (Standard_Error, "(""" & YYText & """)");
        end if;

-- UMASS CODES :
--   Update tok_begin_line, tok_end_line, tok_begin_col and tok_end_col
--   after matching the token.
        if yy_act /= YY_END_OF_BUFFER and then yy_act /= 0 then
-- Token are matched only when yy_act is not yy_end_of_buffer or 0.
          Tok_Begin_Line := Tok_End_Line;
          Tok_Begin_Col := Tok_End_Col + 1;
          Tok_End_Col := Tok_Begin_Col + yy_cp - yy_bp - 1;
          if yy_ch_buf (yy_bp) = ASCII.LF then
            Token_At_End_Of_Line := True;
          end if;
        end if;
-- END OF UMASS CODES.

<<do_action>>   -- this label is used only to access EOF actions
            case yy_act is
                when 0 =>  --  Must backtrack
                  --  Undo the effects of YY_DO_BEFORE_ACTION
                  yy_ch_buf(yy_cp) := yy_hold_char;
                  yy_cp := yy_last_accepting_cpos;
                  yy_current_state := yy_last_accepting_state;
                  goto next_action;


  when 1 =>
--# line 62 "vrml.l"
 -- BEGIN(use_and_def); 
                     return DEF; 

--<use_and_def>{INSTANCE}        { yylval.string := strdup(yytext);
--                  BEGIN(INITIAL);
--                  return VRMLWORD; }
--<use_and_def>[ \t]*        ;
--<use_and_def>\n            linenum ++;
  when 2 =>
--# line 69 "vrml.l"
 -- BEGIN(use_and_def);
                      return USE_t; 

  when 3 =>
--# line 72 "vrml.l"
 return ASCIITEXT; 

  when 4 =>
--# line 73 "vrml.l"
 return CONE; 

  when 5 =>
--# line 74 "vrml.l"
 return COORDINATE3; 

  when 6 =>
--# line 75 "vrml.l"
 return CUBE; 

  when 7 =>
--# line 76 "vrml.l"
 return CYLINDER; 

  when 8 =>
--# line 77 "vrml.l"
 return DIRECTIONALLIGHT; 

  when 9 =>
--# line 78 "vrml.l"
 return FONTSTYLE; 

  when 10 =>
--# line 79 "vrml.l"
 return GROUP; 

  when 11 =>
--# line 80 "vrml.l"
 return INDEXEDFACESET; 

  when 12 =>
--# line 81 "vrml.l"
 return INDEXEDLINESET; 

  when 13 =>
--# line 82 "vrml.l"
 return INFO; 

  when 14 =>
--# line 83 "vrml.l"
 return LOD; 

  when 15 =>
--# line 84 "vrml.l"
 return LEVELOFDETAIL; 

  when 16 =>
--# line 85 "vrml.l"
 return MATERIAL; 

  when 17 =>
--# line 86 "vrml.l"
 return MATERIALBINDING; 

  when 18 =>
--# line 87 "vrml.l"
 return MATRIXTRANSFORM; 

  when 19 =>
--# line 88 "vrml.l"
 return NORMAL; 

  when 20 =>
--# line 89 "vrml.l"
 return NORMALBINDING; 

  when 21 =>
--# line 90 "vrml.l"
 return ORTHOGRAPHICCAMERA; 

  when 22 =>
--# line 91 "vrml.l"
 return PERSPECTIVECAMERA; 

  when 23 =>
--# line 92 "vrml.l"
 return POINTLIGHT; 

  when 24 =>
--# line 93 "vrml.l"
 return POINTSET; 

  when 25 =>
--# line 94 "vrml.l"
 return ROTATION; 

  when 26 =>
--# line 95 "vrml.l"
 return SCALE; 

  when 27 =>
--# line 96 "vrml.l"
 return SEPARATOR; 

  when 28 =>
--# line 97 "vrml.l"
 return SHAPEHINTS_t; 

  when 29 =>
--# line 98 "vrml.l"
 return SPHERE; 

  when 30 =>
--# line 99 "vrml.l"
 return SPOTLIGHT; 

  when 31 =>
--# line 100 "vrml.l"
 return SWITCH; 

  when 32 =>
--# line 101 "vrml.l"
 return TEXTURE2; 

  when 33 =>
--# line 102 "vrml.l"
 return TEXTURE2TRANSFORM; 

  when 34 =>
--# line 103 "vrml.l"
 return TEXTURECOORDINATE2; 

  when 35 =>
--# line 104 "vrml.l"
 return TRANSFORM; 

  when 36 =>
--# line 105 "vrml.l"
 return TRANSFORMSEPARATOR; 

  when 37 =>
--# line 106 "vrml.l"
 return TRANSLATION; 

  when 38 =>
--# line 107 "vrml.l"
 return WWWANCHOR; 

  when 39 =>
--# line 108 "vrml.l"
 return WWWINLINE; 

  when 40 =>
--# line 110 "vrml.l"
 return PARTS; 

  when 41 =>
--# line 111 "vrml.l"
 return BOTTOMRADIUS; 

  when 42 =>
--# line 112 "vrml.l"
 return HEIGHT; 

  when 43 =>
--# line 113 "vrml.l"
 return POINT; 

  when 44 =>
--# line 114 "vrml.l"
 return WIDTH; 

  when 45 =>
--# line 115 "vrml.l"
 return DEPTH; 

  when 46 =>
--# line 116 "vrml.l"
 return STRING_t; 

  when 47 =>
--# line 117 "vrml.l"
 return SPACING; 

  when 48 =>
--# line 118 "vrml.l"
 return JUSTIFICATION; 

  when 49 =>
--# line 119 "vrml.l"
 return RADIUS; 

  when 50 =>
--# line 120 "vrml.l"
 return ON; 

  when 51 =>
--# line 121 "vrml.l"
 return INTENSITY; 

  when 52 =>
--# line 122 "vrml.l"
 return COLOR; 

  when 53 =>
--# line 123 "vrml.l"
 return DIRECTION; 

  when 54 =>
--# line 124 "vrml.l"
 return SIZE; 

  when 55 =>
--# line 125 "vrml.l"
 return FAMILY; 

  when 56 =>
--# line 126 "vrml.l"
 return STYLE; 

  when 57 =>
--# line 127 "vrml.l"
 return COORDINDEX; 

  when 58 =>
--# line 128 "vrml.l"
 return MATERIALINDEX; 

  when 59 =>
--# line 129 "vrml.l"
 return NORMALINDEX; 

  when 60 =>
--# line 130 "vrml.l"
 return TEXTURECOORDINDEX; 

  when 61 =>
--# line 131 "vrml.l"
 return RANGE_t; 

  when 62 =>
--# line 132 "vrml.l"
 return CENTER; 

  when 63 =>
--# line 133 "vrml.l"
 return SCREENAREA; 

  when 64 =>
--# line 134 "vrml.l"
 return AMBIENTCOLOR; 

  when 65 =>
--# line 135 "vrml.l"
 return DIFFUSECOLOR; 

  when 66 =>
--# line 136 "vrml.l"
 return SPECULARCOLOR; 

  when 67 =>
--# line 137 "vrml.l"
 return EMISSIVECOLOR; 

  when 68 =>
--# line 138 "vrml.l"
 return SHININESS; 

  when 69 =>
--# line 139 "vrml.l"
 return TRANSPARENCY; 

  when 70 =>
--# line 140 "vrml.l"
 return VALUE; 

  when 71 =>
--# line 141 "vrml.l"
 return MATRIX; 

  when 72 =>
--# line 142 "vrml.l"
 return VECTOR; 

  when 73 =>
--# line 143 "vrml.l"
 return POSITION; 

  when 74 =>
--# line 144 "vrml.l"
 return ORIENTATION; 

  when 75 =>
--# line 145 "vrml.l"
 return FOCALDISTANCE; 

  when 76 =>
--# line 146 "vrml.l"
 return HEIGHTANGLE; 

  when 77 =>
--# line 147 "vrml.l"
 return LOCATION; 

  when 78 =>
--# line 148 "vrml.l"
 return STARTINDEX; 

  when 79 =>
--# line 149 "vrml.l"
 return NUMPOINTS; 

  when 80 =>
--# line 150 "vrml.l"
 return ROTATION_F; 

  when 81 =>
--# line 151 "vrml.l"
 return SCALEFACTOR; 

  when 82 =>
--# line 152 "vrml.l"
 return RENDERCULLING; 

  when 83 =>
--# line 153 "vrml.l"
 return VERTEXORDERING; 

  when 84 =>
--# line 154 "vrml.l"
 return SHAPETYPE; 

  when 85 =>
--# line 155 "vrml.l"
 return FACETYPE; 

  when 86 =>
--# line 156 "vrml.l"
 return CREASEANGLE; 

  when 87 =>
--# line 157 "vrml.l"
 return DROPOFFRATE; 

  when 88 =>
--# line 158 "vrml.l"
 return CUTOFFANGLE; 

  when 89 =>
--# line 159 "vrml.l"
 return WHICHCHILD; 

  when 90 =>
--# line 160 "vrml.l"
 return FILENAME; 

  when 91 =>
--# line 161 "vrml.l"
 return IMAGE; 

  when 92 =>
--# line 162 "vrml.l"
 return WRAPS; 

  when 93 =>
--# line 163 "vrml.l"
 return WRAPT; 

  when 94 =>
--# line 164 "vrml.l"
 return SCALEORIENTATION; 

  when 95 =>
--# line 165 "vrml.l"
 return TRANSLATION_F; 

  when 96 =>
--# line 166 "vrml.l"
 return NAME; 

  when 97 =>
--# line 167 "vrml.l"
 return DESCRIPTION; 

  when 98 =>
--# line 168 "vrml.l"
 return MAP; 

  when 99 =>
--# line 169 "vrml.l"
 return BBOXSIZE; 

  when 100 =>
--# line 170 "vrml.l"
 return BBOXCENTER; 

  when 101 =>
--# line 172 "vrml.l"
 yylval.intval := VRML_justification'Pos(VRML_LEFT); 
                  return NUMBER; 

  when 102 =>
--# line 174 "vrml.l"
 yylval.intval := VRML_justification'Pos(VRML_CENTER);
                  return NUMBER; 

  when 103 =>
--# line 176 "vrml.l"
 yylval.intval := VRML_justification'Pos(VRML_RIGHT);
                  return NUMBER; 

  when 104 =>
--# line 179 "vrml.l"
 yylval.intval := Integer(VRML_SIDES);
                  return NUMBER; 

  when 105 =>
--# line 181 "vrml.l"
 yylval.intval := Integer(VRML_BOTTOM);
                  return NUMBER; 

  when 106 =>
--# line 183 "vrml.l"
 yylval.intval := Integer(VRML_TOP);
                  return NUMBER; 

  when 107 =>
--# line 185 "vrml.l"
 yylval.intval := Integer(VRML_ALL);
                  return NUMBER; 

  when 108 =>
--# line 188 "vrml.l"
 yylval.intval := 0; return NUMBER; 

  when 109 =>
--# line 189 "vrml.l"
 yylval.intval := 1; return NUMBER; 

  when 110 =>
--# line 191 "vrml.l"
 yylval.intval := VRML_font_family'Pos(VRML_SERIF); 
                  return NUMBER; 

  when 111 =>
--# line 193 "vrml.l"
 yylval.intval := VRML_font_family'Pos(VRML_SANS);
                  return NUMBER; 

  when 112 =>
--# line 195 "vrml.l"
 yylval.intval := VRML_font_family'Pos(VRML_TYPEWRITER);
                  return NUMBER; 

  when 113 =>
--# line 198 "vrml.l"
 yylval.intval := Integer(VRML_NONE);
                  return NUMBER; 

  when 114 =>
--# line 200 "vrml.l"
 yylval.intval := Integer(VRML_BOLD);
                  return NUMBER; 

  when 115 =>
--# line 202 "vrml.l"
 yylval.intval := Integer(VRML_ITALIC);
                  return NUMBER; 

  when 116 =>
--# line 205 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_DEFAULT);
                  return NUMBER; 

  when 117 =>
--# line 207 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_OVERALL);
                  return NUMBER; 

  when 118 =>
--# line 209 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_PART);
                  return NUMBER; 

  when 119 =>
--# line 211 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_PART_INDEXED);
                  return NUMBER; 

  when 120 =>
--# line 213 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_FACE);
                  return NUMBER; 

  when 121 =>
--# line 215 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_FACE_INDEXED);
                  return NUMBER; 

  when 122 =>
--# line 217 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_VERTEX);
                  return NUMBER; 

  when 123 =>
--# line 219 "vrml.l"
 yylval.intval := VRML_binding'Pos(VRML_PER_VERTEX_INDEXED);
                  return NUMBER; 

  when 124 =>
--# line 222 "vrml.l"
 yylval.intval := VRML_culling'Pos(VRML_ON);
                  return NUMBER; 

  when 125 =>
--# line 224 "vrml.l"
 yylval.intval := VRML_culling'Pos(VRML_OFF);
                  return NUMBER; 

  when 126 =>
--# line 226 "vrml.l"
 yylval.intval := VRML_culling'Pos(VRML_AUTO);
                  return NUMBER; 

  when 127 =>
--# line 229 "vrml.l"
 yylval.intval := VRML_vertex_ordering'Pos(VRML_UNKNOWN_ORDERING);
                  return NUMBER; 

  when 128 =>
--# line 231 "vrml.l"
 yylval.intval := VRML_vertex_ordering'Pos(VRML_CLOCKWISE);
                  return NUMBER; 

  when 129 =>
--# line 233 "vrml.l"
 yylval.intval := VRML_vertex_ordering'Pos(VRML_COUNTERCLOCKWISE);
                  return NUMBER; 

  when 130 =>
--# line 236 "vrml.l"
 yylval.intval := VRML_shape_type'Pos(VRML_UNKNOWN_SHAPE_TYPE);
                  return NUMBER; 

  when 131 =>
--# line 238 "vrml.l"
 yylval.intval := VRML_shape_type'Pos(VRML_SOLID);
                  return NUMBER; 

  when 132 =>
--# line 241 "vrml.l"
 yylval.intval := VRML_face_type'Pos(VRML_UNKNOWN_FACE_TYPE);
                  return NUMBER; 

  when 133 =>
--# line 243 "vrml.l"
 yylval.intval := VRML_face_type'Pos(VRML_CONVEX);
                  return NUMBER; 

  when 134 =>
--# line 246 "vrml.l"
 yylval.intval := VRML_wrap'Pos(VRML_REPEAT);
                  return NUMBER; 

  when 135 =>
--# line 248 "vrml.l"
 yylval.intval := VRML_wrap'Pos(VRML_CLAMP);
                  return NUMBER; 

  when 136 =>
--# line 251 "vrml.l"

                declare
                  c: Character;
                begin
                  loop
                    loop
                      Get(c);
                      exit when c=']' or End_of_File or c=ASCII.CR or c=ASCII.LF;
                    end loop;
                    if c=ASCII.CR or c=ASCII.LF then
                      linenum:= linenum + 1;
                    elsif c=']' then
                      return FIELDS;
                    else
                      YY_Terminate;
                      -- break;
                    end if;
                  end loop;
                  return FIELDS;
                end;
                

  when 137 =>
--# line 273 "vrml.l"
 yylval.intval   := 0;
                   yylval.floatval := 0.0;
                   return NUMBER;
                 

  when 138 =>
--# line 277 "vrml.l"
 yylval.intval := Integer'Value(yytext);
                   yylval.floatval:= Real( yylval.intval );
                   return NUMBER;

  when 139 =>
--# line 280 "vrml.l"
 yylval.intval := Integer'Value("8#"&yytext&'#');
                   yylval.floatval:= Real( yylval.intval );
                   return NUMBER;

  when 140 =>
--# line 284 "vrml.l"
 yylval.floatval := Real'Value(yytext);
                      return FLOAT_t;

  when 141 =>
--# line 286 "vrml.l"
 yylval.intval := Integer'Value("16#"&yytext&'#');
                   yylval.floatval:= Real( yylval.intval );
                   return NUMBER;

  when 142 =>
--# line 290 "vrml.l"
 -- Skip rest of line.
                      VRML_Comment(YYText);
                      linenum:= linenum + 1;
                    

  when 143 =>
--# line 295 "vrml.l"
return VRMLSTRING;

--\"                {
--                declare
--                  c,oldc: Integer;
--                begin
--                  char *buffer;
--                  int buflen=8;
--                  int len=0;
--                  c := EOF;
--                  buffer := (char *)malloc(buflen);
--                  if (!buffer)
--                    yyterminate();
--                  buffer[0] := '\0';
--                  for (;;) {
--                    oldc := c;
--                    c := input();
--                    if (c=='\"') {
--                      if (oldc=='\\') {
--                        buffer[len-1] := '\"';
--                      } else {
--                        yylval.string := buffer;
--                        return VRMLSTRING;
--                      }
--                    } else {
--                      if (len+2 >= buflen) {
--                        buflen *= 2;
--                        buffer := (char *)realloc(buffer, buflen);
--                        if (!buffer)
--                      yyterminate();
--                      }
--                      buffer[len] := c;
--                      buffer[++len] := '\0';
--                    }
--                  }
--                  return VRMLSTRING;
--                end;
--                }
  when 144 =>
--# line 336 "vrml.l"
 null; -- \t  ;

  when 145 =>
--# line 337 "vrml.l"
linenum:= linenum+1;

--{ID}                {
--                declare
--                  c: Integer;
--                begin
--                  register int c;
--                  int stack := 0;
--                  for ( ; ; ) {
--                    do {
--                      c := input();
--                    } while (c!='{' && c!='}' && c!=EOF &&
--                         c!='\n');
--                    if (c=='{') {
--                      stack ++;
--                    } else if (c=='}') {
--                      stack --;
--                    } else if (c=='\n') {
--                      linenum ++;
--                    } else {
--                      yyterminate();
--                      break;
--                    }
--                    if (!stack)
--                      break;
--                  }
--                  return UNKNOWNNODE;
--                end;
--                }
  when 146 =>
--# line 368 "vrml.l"
return VRMLWORD;

  when 147 =>
--# line 370 "vrml.l"
 null; -- ??
                     -- C: return *yytext;
                   

  when 148 =>
--# line 373 "vrml.l"
 return ','; 

  when 149 =>
--# line 374 "vrml.l"
 return '}'; 

  when 150 =>
--# line 375 "vrml.l"
 return '{'; 

  when 151 =>
--# line 376 "vrml.l"
 return '['; 

  when 152 =>
--# line 377 "vrml.l"
 return ']'; 

  when 153 =>
--# line 379 "vrml.l"
 Put_Line(Standard_Error, 
                   -- current_file'img & ' ' & 
                   Integer'Image(linenum) & " Warning:");
                   Put_Line(Standard_Error, "Skipping illegal input" & yytext);

  when 154 =>
--# line 384 "vrml.l"
ECHO;
when YY_END_OF_BUFFER + INITIAL + 1 =>
    return End_Of_Input;
                when YY_END_OF_BUFFER =>
                    -- undo the effects of YY_DO_BEFORE_ACTION
                    yy_ch_buf(yy_cp) := yy_hold_char;

                    yytext_ptr := yy_bp;

                    case yy_get_next_buffer is
                        when EOB_ACT_END_OF_FILE =>
                            begin
                            if yyWrap then
                                -- note: because we've taken care in
                                -- yy_get_next_buffer() to have set up yytext,
                                -- we can now set up yy_c_buf_p so that if some
                                -- total hoser (like aflex itself) wants
                                -- to call the scanner after we return the
                                -- End_Of_Input, it'll still work - another
                                -- End_Of_Input will get returned.

                                yy_c_buf_p := yytext_ptr;

                                yy_act := YY_STATE_EOF((yy_start - 1) / 2);

                                goto do_action;
                            else
                                --  Start processing a new file
                                yy_init := True;
                                goto new_file;
                            end if;
                            end;
                        when EOB_ACT_RESTART_SCAN =>
                            yy_c_buf_p := yytext_ptr;
                            yy_hold_char := yy_ch_buf (yy_c_buf_p);
                        when EOB_ACT_LAST_MATCH =>
                            yy_c_buf_p := yy_n_chars;
                            yy_current_state := yy_get_previous_state;

                            yy_cp := yy_c_buf_p;
                            yy_bp := yytext_ptr;
                            goto next_action;
                        when others => null;
                        end case;  --  case yy_get_next_buffer()
                when others =>
                    Text_IO.Put ("action # ");
                    Text_IO.Put (Integer'Image (yy_act));
                    Text_IO.New_Line;
                    raise AFLEX_INTERNAL_ERROR;
            end case;  --  case (yy_act)
        end loop;  --  end of loop waiting for end of file
end YYLex;
